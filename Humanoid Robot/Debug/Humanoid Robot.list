
Humanoid Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000245c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002568  08002568  00003568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025c8  080025c8  00004060  2**0
                  CONTENTS
  4 .ARM          00000000  080025c8  080025c8  00004060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025c8  080025c8  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c8  080025c8  000035c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025cc  080025cc  000035cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080025d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000060  08002630  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08002630  000041f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ca1  00000000  00000000  00004089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012e6  00000000  00000000  00007d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  00009010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000493  00000000  00000000  00009660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013764  00000000  00000000  00009af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000051c7  00000000  00000000  0001d257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006283d  00000000  00000000  0002241e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00084c5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002050  00000000  00000000  00084ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00086cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002550 	.word	0x08002550

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002550 	.word	0x08002550

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	@ (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	@ (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	db0b      	blt.n	80001da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	f003 021f 	and.w	r2, r3, #31
 80001c8:	4906      	ldr	r1, [pc, #24]	@ (80001e4 <__NVIC_EnableIRQ+0x34>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	095b      	lsrs	r3, r3, #5
 80001d0:	2001      	movs	r0, #1
 80001d2:	fa00 f202 	lsl.w	r2, r0, r2
 80001d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	e000e100 	.word	0xe000e100

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	@ (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	@ (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800023c:	b480      	push	{r7}
 800023e:	b089      	sub	sp, #36	@ 0x24
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000250:	69fb      	ldr	r3, [r7, #28]
 8000252:	f1c3 0307 	rsb	r3, r3, #7
 8000256:	2b04      	cmp	r3, #4
 8000258:	bf28      	it	cs
 800025a:	2304      	movcs	r3, #4
 800025c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3304      	adds	r3, #4
 8000262:	2b06      	cmp	r3, #6
 8000264:	d902      	bls.n	800026c <NVIC_EncodePriority+0x30>
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	3b03      	subs	r3, #3
 800026a:	e000      	b.n	800026e <NVIC_EncodePriority+0x32>
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000270:	f04f 32ff 	mov.w	r2, #4294967295
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	43da      	mvns	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	401a      	ands	r2, r3
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000284:	f04f 31ff 	mov.w	r1, #4294967295
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	43d9      	mvns	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	4313      	orrs	r3, r2
         );
}
 8000296:	4618      	mov	r0, r3
 8000298:	3724      	adds	r7, #36	@ 0x24
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr

080002be <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80002be:	b480      	push	{r7}
 80002c0:	b083      	sub	sp, #12
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	601a      	str	r2, [r3, #0]
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr

080002dc <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	431a      	orrs	r2, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	60da      	str	r2, [r3, #12]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr

08000300 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	f023 0201 	bic.w	r2, r3, #1
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	60da      	str	r2, [r3, #12]
}
 8000314:	bf00      	nop
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr

0800031e <LL_I2C_EnableIT_EVT>:
  * @rmtoll CR2          ITEVTEN       LL_I2C_EnableIT_EVT
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_EVT(I2C_TypeDef *I2Cx)
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITEVTEN);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	605a      	str	r2, [r3, #4]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <LL_I2C_EnableIT_ERR>:
  * @rmtoll CR2          ITERREN       LL_I2C_EnableIT_ERR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_ERR(I2C_TypeDef *I2Cx)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_ITERREN);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	605a      	str	r2, [r3, #4]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
	...

0800035c <LL_RCC_HSE_EnableCSS>:
  * @brief  Enable the Clock Security System.
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8000360:	4b04      	ldr	r3, [pc, #16]	@ (8000374 <LL_RCC_HSE_EnableCSS+0x18>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a03      	ldr	r2, [pc, #12]	@ (8000374 <LL_RCC_HSE_EnableCSS+0x18>)
 8000366:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800036a:	6013      	str	r3, [r2, #0]
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	40021000 	.word	0x40021000

08000378 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800037c:	4b04      	ldr	r3, [pc, #16]	@ (8000390 <LL_RCC_HSE_Enable+0x18>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a03      	ldr	r2, [pc, #12]	@ (8000390 <LL_RCC_HSE_Enable+0x18>)
 8000382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000386:	6013      	str	r3, [r2, #0]
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000

08000394 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000398:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <LL_RCC_HSE_IsReady+0x20>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80003a4:	bf0c      	ite	eq
 80003a6:	2301      	moveq	r3, #1
 80003a8:	2300      	movne	r3, #0
 80003aa:	b2db      	uxtb	r3, r3
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000

080003b8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <LL_RCC_SetSysClkSource+0x24>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	f023 0203 	bic.w	r2, r3, #3
 80003c8:	4904      	ldr	r1, [pc, #16]	@ (80003dc <LL_RCC_SetSysClkSource+0x24>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4313      	orrs	r3, r2
 80003ce:	604b      	str	r3, [r1, #4]
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003e4:	4b03      	ldr	r3, [pc, #12]	@ (80003f4 <LL_RCC_GetSysClkSource+0x14>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	f003 030c 	and.w	r3, r3, #12
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	40021000 	.word	0x40021000

080003f8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <LL_RCC_SetAHBPrescaler+0x24>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000408:	4904      	ldr	r1, [pc, #16]	@ (800041c <LL_RCC_SetAHBPrescaler+0x24>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4313      	orrs	r3, r2
 800040e:	604b      	str	r3, [r1, #4]
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000428:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <LL_RCC_SetAPB1Prescaler+0x24>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000430:	4904      	ldr	r1, [pc, #16]	@ (8000444 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4313      	orrs	r3, r2
 8000436:	604b      	str	r3, [r1, #4]
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000450:	4b06      	ldr	r3, [pc, #24]	@ (800046c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000458:	4904      	ldr	r1, [pc, #16]	@ (800046c <LL_RCC_SetAPB2Prescaler+0x24>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	604b      	str	r3, [r1, #4]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000474:	4b04      	ldr	r3, [pc, #16]	@ (8000488 <LL_RCC_PLL_Enable+0x18>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a03      	ldr	r2, [pc, #12]	@ (8000488 <LL_RCC_PLL_Enable+0x18>)
 800047a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800047e:	6013      	str	r3, [r2, #0]
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000

0800048c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000490:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <LL_RCC_PLL_IsReady+0x20>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800049c:	bf0c      	ite	eq
 800049e:	2301      	moveq	r3, #1
 80004a0:	2300      	movne	r3, #0
 80004a2:	b2db      	uxtb	r3, r3
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	40021000 	.word	0x40021000

080004b0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	430b      	orrs	r3, r1
 80004cc:	4903      	ldr	r1, [pc, #12]	@ (80004dc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80004ce:	4313      	orrs	r3, r2
 80004d0:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000

080004e0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80004e8:	4b08      	ldr	r3, [pc, #32]	@ (800050c <LL_APB1_GRP1_EnableClock+0x2c>)
 80004ea:	69da      	ldr	r2, [r3, #28]
 80004ec:	4907      	ldr	r1, [pc, #28]	@ (800050c <LL_APB1_GRP1_EnableClock+0x2c>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004f4:	4b05      	ldr	r3, [pc, #20]	@ (800050c <LL_APB1_GRP1_EnableClock+0x2c>)
 80004f6:	69da      	ldr	r2, [r3, #28]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4013      	ands	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000518:	4b08      	ldr	r3, [pc, #32]	@ (800053c <LL_APB2_GRP1_EnableClock+0x2c>)
 800051a:	699a      	ldr	r2, [r3, #24]
 800051c:	4907      	ldr	r1, [pc, #28]	@ (800053c <LL_APB2_GRP1_EnableClock+0x2c>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4313      	orrs	r3, r2
 8000522:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000524:	4b05      	ldr	r3, [pc, #20]	@ (800053c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000526:	699a      	ldr	r2, [r3, #24]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4013      	ands	r3, r2
 800052c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800052e:	68fb      	ldr	r3, [r7, #12]
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000548:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <LL_FLASH_SetLatency+0x24>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f023 0207 	bic.w	r2, r3, #7
 8000550:	4904      	ldr	r1, [pc, #16]	@ (8000564 <LL_FLASH_SetLatency+0x24>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4313      	orrs	r3, r2
 8000556:	600b      	str	r3, [r1, #0]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40022000 	.word	0x40022000

08000568 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800056c:	4b03      	ldr	r3, [pc, #12]	@ (800057c <LL_FLASH_GetLatency+0x14>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f003 0307 	and.w	r3, r3, #7
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	40022000 	.word	0x40022000

08000580 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	60da      	str	r2, [r3, #12]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	691b      	ldr	r3, [r3, #16]
 80005aa:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	615a      	str	r2, [r3, #20]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005d8:	2b40      	cmp	r3, #64	@ 0x40
 80005da:	bf0c      	ite	eq
 80005dc:	2301      	moveq	r3, #1
 80005de:	2300      	movne	r3, #0
 80005e0:	b2db      	uxtb	r3, r3
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005fc:	2b80      	cmp	r3, #128	@ 0x80
 80005fe:	bf0c      	ite	eq
 8000600:	2301      	moveq	r3, #1
 8000602:	2300      	movne	r3, #0
 8000604:	b2db      	uxtb	r3, r3
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800061c:	78fa      	ldrb	r2, [r7, #3]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	605a      	str	r2, [r3, #4]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	b29a      	uxth	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	615a      	str	r2, [r3, #20]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
	...

0800064c <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000650:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000658:	4a03      	ldr	r2, [pc, #12]	@ (8000668 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800065a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800065e:	6053      	str	r3, [r2, #4]
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	40010000 	.word	0x40010000

0800066c <_write>:
static void MX_I2C2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char *ptr, int len) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	e011      	b.n	80006a2 <_write+0x36>
        while (!LL_USART_IsActiveFlag_TXE(USART1));  // Wait until TX buffer is empty
 800067e:	bf00      	nop
 8000680:	4810      	ldr	r0, [pc, #64]	@ (80006c4 <_write+0x58>)
 8000682:	f7ff ffb3 	bl	80005ec <LL_USART_IsActiveFlag_TXE>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d0f9      	beq.n	8000680 <_write+0x14>
        LL_USART_TransmitData8(USART1, ptr[i]);      // Send byte
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	480b      	ldr	r0, [pc, #44]	@ (80006c4 <_write+0x58>)
 8000698:	f7ff ffba 	bl	8000610 <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	3301      	adds	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	697a      	ldr	r2, [r7, #20]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	dbe9      	blt.n	800067e <_write+0x12>
    }

    while (!LL_USART_IsActiveFlag_TC(USART1));  // Wait for last transmission to complete
 80006aa:	bf00      	nop
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <_write+0x58>)
 80006ae:	f7ff ff8b 	bl	80005c8 <LL_USART_IsActiveFlag_TC>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0f9      	beq.n	80006ac <_write+0x40>
    return len;
 80006b8:	687b      	ldr	r3, [r7, #4]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40013800 	.word	0x40013800

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff1f 	bl	8000510 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006d2:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80006d6:	f7ff ff03 	bl	80004e0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006da:	2003      	movs	r0, #3
 80006dc:	f7ff fd36 	bl	800014c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80006e0:	f7ff fd58 	bl	8000194 <__NVIC_GetPriorityGrouping>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2200      	movs	r2, #0
 80006e8:	210f      	movs	r1, #15
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fda6 	bl	800023c <NVIC_EncodePriority>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4619      	mov	r1, r3
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f7ff fd76 	bl	80001e8 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80006fc:	f7ff ffa6 	bl	800064c <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f824 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f000 f9a2 	bl	8000a4c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000708:	f000 f8d4 	bl	80008b4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800070c:	f000 f946 	bl	800099c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000710:	f000 f85c 	bl	80007cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LL_I2C_EnableIT_EVT(I2C2);
 8000714:	4809      	ldr	r0, [pc, #36]	@ (800073c <main+0x74>)
 8000716:	f7ff fe02 	bl	800031e <LL_I2C_EnableIT_EVT>
  LL_I2C_EnableIT_ERR(I2C2);
 800071a:	4808      	ldr	r0, [pc, #32]	@ (800073c <main+0x74>)
 800071c:	f7ff fe0e 	bl	800033c <LL_I2C_EnableIT_ERR>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	 I2C_SlaveListen();  // Listen for I2C master messages

	  if (dataReady)
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <main+0x78>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0fa      	beq.n	8000720 <main+0x58>
	  {
		  printf("Full Message: %s\r\n", receivedData);
 800072a:	4906      	ldr	r1, [pc, #24]	@ (8000744 <main+0x7c>)
 800072c:	4806      	ldr	r0, [pc, #24]	@ (8000748 <main+0x80>)
 800072e:	f001 f897 	bl	8001860 <iprintf>
		  dataReady = 0;  // Clear flag after processing
 8000732:	4b03      	ldr	r3, [pc, #12]	@ (8000740 <main+0x78>)
 8000734:	2200      	movs	r2, #0
 8000736:	701a      	strb	r2, [r3, #0]
	  if (dataReady)
 8000738:	e7f2      	b.n	8000720 <main+0x58>
 800073a:	bf00      	nop
 800073c:	40005800 	.word	0x40005800
 8000740:	2000007d 	.word	0x2000007d
 8000744:	20000080 	.word	0x20000080
 8000748:	08002568 	.word	0x08002568

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000750:	2002      	movs	r0, #2
 8000752:	f7ff fef5 	bl	8000540 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000756:	bf00      	nop
 8000758:	f7ff ff06 	bl	8000568 <LL_FLASH_GetLatency>
 800075c:	4603      	mov	r3, r0
 800075e:	2b02      	cmp	r3, #2
 8000760:	d1fa      	bne.n	8000758 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000762:	f7ff fe09 	bl	8000378 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000766:	bf00      	nop
 8000768:	f7ff fe14 	bl	8000394 <LL_RCC_HSE_IsReady>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d1fa      	bne.n	8000768 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSE_EnableCSS();
 8000772:	f7ff fdf3 	bl	800035c <LL_RCC_HSE_EnableCSS>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8000776:	f44f 11e0 	mov.w	r1, #1835008	@ 0x1c0000
 800077a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800077e:	f7ff fe97 	bl	80004b0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000782:	f7ff fe75 	bl	8000470 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000786:	bf00      	nop
 8000788:	f7ff fe80 	bl	800048c <LL_RCC_PLL_IsReady>
 800078c:	4603      	mov	r3, r0
 800078e:	2b01      	cmp	r3, #1
 8000790:	d1fa      	bne.n	8000788 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff fe30 	bl	80003f8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000798:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800079c:	f7ff fe40 	bl	8000420 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fe51 	bl	8000448 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff fe06 	bl	80003b8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80007ac:	bf00      	nop
 80007ae:	f7ff fe17 	bl	80003e0 <LL_RCC_GetSysClkSource>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b08      	cmp	r3, #8
 80007b6:	d1fa      	bne.n	80007ae <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(72000000);
 80007b8:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <SystemClock_Config+0x7c>)
 80007ba:	f000 ff73 	bl	80016a4 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80007be:	4802      	ldr	r0, [pc, #8]	@ (80007c8 <SystemClock_Config+0x7c>)
 80007c0:	f000 ff7e 	bl	80016c0 <LL_SetSystemCoreClock>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	044aa200 	.word	0x044aa200

080007cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	@ 0x30
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80007d2:	f107 0318 	add.w	r3, r7, #24
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
 80007e2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80007f2:	2008      	movs	r0, #8
 80007f4:	f7ff fe8c 	bl	8000510 <LL_APB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80007f8:	f24c 03c0 	movw	r3, #49344	@ 0xc0c0
 80007fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007fe:	2309      	movs	r3, #9
 8000800:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000806:	2304      	movs	r3, #4
 8000808:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	4619      	mov	r1, r3
 800080e:	4826      	ldr	r0, [pc, #152]	@ (80008a8 <MX_I2C1_Init+0xdc>)
 8000810:	f000 fb9f 	bl	8000f52 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000814:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000818:	f7ff fe62 	bl	80004e0 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800081c:	f7ff fcba 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8000820:	4603      	mov	r3, r0
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fd08 	bl	800023c <NVIC_EncodePriority>
 800082c:	4603      	mov	r3, r0
 800082e:	4619      	mov	r1, r3
 8000830:	201f      	movs	r0, #31
 8000832:	f7ff fcd9 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000836:	201f      	movs	r0, #31
 8000838:	f7ff fcba 	bl	80001b0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800083c:	f7ff fcaa 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8000840:	4603      	mov	r3, r0
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fcf8 	bl	800023c <NVIC_EncodePriority>
 800084c:	4603      	mov	r3, r0
 800084e:	4619      	mov	r1, r3
 8000850:	2020      	movs	r0, #32
 8000852:	f7ff fcc9 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000856:	2020      	movs	r0, #32
 8000858:	f7ff fcaa 	bl	80001b0 <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800085c:	4813      	ldr	r0, [pc, #76]	@ (80008ac <MX_I2C1_Init+0xe0>)
 800085e:	f7ff fd4f 	bl	8000300 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000862:	4812      	ldr	r0, [pc, #72]	@ (80008ac <MX_I2C1_Init+0xe0>)
 8000864:	f7ff fd2b 	bl	80002be <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000868:	4810      	ldr	r0, [pc, #64]	@ (80008ac <MX_I2C1_Init+0xe0>)
 800086a:	f7ff fd19 	bl	80002a0 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_I2C1_Init+0xe4>)
 8000874:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800087e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000884:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800088a:	f107 0318 	add.w	r3, r7, #24
 800088e:	4619      	mov	r1, r3
 8000890:	4806      	ldr	r0, [pc, #24]	@ (80008ac <MX_I2C1_Init+0xe0>)
 8000892:	f000 fcb3 	bl	80011fc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8000896:	2100      	movs	r1, #0
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_I2C1_Init+0xe0>)
 800089a:	f7ff fd1f 	bl	80002dc <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	@ 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40010c00 	.word	0x40010c00
 80008ac:	40005400 	.word	0x40005400
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	@ 0x30
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80008ba:	f107 0318 	add.w	r3, r7, #24
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]
 80008ca:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80008da:	2008      	movs	r0, #8
 80008dc:	f7ff fe18 	bl	8000510 <LL_APB2_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PB10   ------> I2C2_SCL
  PB11   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80008e0:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <MX_I2C2_Init+0xd8>)
 80008e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008e4:	2309      	movs	r3, #9
 80008e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80008ec:	2304      	movs	r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4619      	mov	r1, r3
 80008f4:	4826      	ldr	r0, [pc, #152]	@ (8000990 <MX_I2C2_Init+0xdc>)
 80008f6:	f000 fb2c 	bl	8000f52 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80008fa:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80008fe:	f7ff fdef 	bl	80004e0 <LL_APB1_GRP1_EnableClock>

  /* I2C2 interrupt Init */
  NVIC_SetPriority(I2C2_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000902:	f7ff fc47 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8000906:	4603      	mov	r3, r0
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fc95 	bl	800023c <NVIC_EncodePriority>
 8000912:	4603      	mov	r3, r0
 8000914:	4619      	mov	r1, r3
 8000916:	2021      	movs	r0, #33	@ 0x21
 8000918:	f7ff fc66 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_EV_IRQn);
 800091c:	2021      	movs	r0, #33	@ 0x21
 800091e:	f7ff fc47 	bl	80001b0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C2_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000922:	f7ff fc37 	bl	8000194 <__NVIC_GetPriorityGrouping>
 8000926:	4603      	mov	r3, r0
 8000928:	2200      	movs	r2, #0
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fc85 	bl	800023c <NVIC_EncodePriority>
 8000932:	4603      	mov	r3, r0
 8000934:	4619      	mov	r1, r3
 8000936:	2022      	movs	r0, #34	@ 0x22
 8000938:	f7ff fc56 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_ER_IRQn);
 800093c:	2022      	movs	r0, #34	@ 0x22
 800093e:	f7ff fc37 	bl	80001b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN I2C2_Init 1 */
  I2C_InitStruct.OwnAddress1 = 0x20;
 8000942:	2320      	movs	r3, #32
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8000946:	4813      	ldr	r0, [pc, #76]	@ (8000994 <MX_I2C2_Init+0xe0>)
 8000948:	f7ff fcda 	bl	8000300 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 800094c:	4811      	ldr	r0, [pc, #68]	@ (8000994 <MX_I2C2_Init+0xe0>)
 800094e:	f7ff fcb6 	bl	80002be <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8000952:	4810      	ldr	r0, [pc, #64]	@ (8000994 <MX_I2C2_Init+0xe0>)
 8000954:	f7ff fca4 	bl	80002a0 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800095c:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_I2C2_Init+0xe4>)
 800095e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
//  I2C_InitStruct.OwnAddress1 = 0;
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800096a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800096e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	4619      	mov	r1, r3
 8000976:	4807      	ldr	r0, [pc, #28]	@ (8000994 <MX_I2C2_Init+0xe0>)
 8000978:	f000 fc40 	bl	80011fc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 800097c:	2100      	movs	r1, #0
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_I2C2_Init+0xe0>)
 8000980:	f7ff fcac 	bl	80002dc <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	3730      	adds	r7, #48	@ 0x30
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	040c000c 	.word	0x040c000c
 8000990:	40010c00 	.word	0x40010c00
 8000994:	40005800 	.word	0x40005800
 8000998:	000186a0 	.word	0x000186a0

0800099c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	@ 0x30
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
 80009b2:	615a      	str	r2, [r3, #20]
 80009b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80009c4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80009c8:	f7ff fda2 	bl	8000510 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80009cc:	2004      	movs	r0, #4
 80009ce:	f7ff fd9f 	bl	8000510 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a3c <MX_USART1_UART_Init+0xa0>)
 80009d4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009d6:	2309      	movs	r3, #9
 80009d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	4816      	ldr	r0, [pc, #88]	@ (8000a40 <MX_USART1_UART_Init+0xa4>)
 80009e8:	f000 fab3 	bl	8000f52 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80009ec:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <MX_USART1_UART_Init+0xa8>)
 80009ee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80009f0:	2304      	movs	r3, #4
 80009f2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	4811      	ldr	r0, [pc, #68]	@ (8000a40 <MX_USART1_UART_Init+0xa4>)
 80009fa:	f000 faaa 	bl	8000f52 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80009fe:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000a02:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000a10:	230c      	movs	r3, #12
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4809      	ldr	r0, [pc, #36]	@ (8000a48 <MX_USART1_UART_Init+0xac>)
 8000a24:	f000 fdc4 	bl	80015b0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000a28:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <MX_USART1_UART_Init+0xac>)
 8000a2a:	f7ff fdb8 	bl	800059e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000a2e:	4806      	ldr	r0, [pc, #24]	@ (8000a48 <MX_USART1_UART_Init+0xac>)
 8000a30:	f7ff fda6 	bl	8000580 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3730      	adds	r7, #48	@ 0x30
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	04020002 	.word	0x04020002
 8000a40:	40010800 	.word	0x40010800
 8000a44:	04040004 	.word	0x04040004
 8000a48:	40013800 	.word	0x40013800

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000a60:	2010      	movs	r0, #16
 8000a62:	f7ff fd55 	bl	8000510 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000a66:	2020      	movs	r0, #32
 8000a68:	f7ff fd52 	bl	8000510 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000a6c:	2008      	movs	r0, #8
 8000a6e:	f7ff fd4f 	bl	8000510 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000a72:	2004      	movs	r0, #4
 8000a74:	f7ff fd4c 	bl	8000510 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_13|LL_GPIO_PIN_15|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8000a78:	490a      	ldr	r1, [pc, #40]	@ (8000aa4 <MX_GPIO_Init+0x58>)
 8000a7a:	480b      	ldr	r0, [pc, #44]	@ (8000aa8 <MX_GPIO_Init+0x5c>)
 8000a7c:	f7ff fdd6 	bl	800062c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_15|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <MX_GPIO_Init+0x58>)
 8000a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_GPIO_Init+0x5c>)
 8000a96:	f000 fa5c 	bl	8000f52 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	04a030b0 	.word	0x04a030b0
 8000aa8:	40010c00 	.word	0x40010c00

08000aac <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000abc:	2b40      	cmp	r3, #64	@ 0x40
 8000abe:	bf0c      	ite	eq
 8000ac0:	2301      	moveq	r3, #1
 8000ac2:	2300      	movne	r3, #0
 8000ac4:	b2db      	uxtb	r3, r3
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	bf0c      	ite	eq
 8000ae4:	2301      	moveq	r3, #1
 8000ae6:	2300      	movne	r3, #0
 8000ae8:	b2db      	uxtb	r3, r3
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll SR1          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_STOPF) == (I2C_SR1_STOPF));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	2b10      	cmp	r3, #16
 8000b06:	bf0c      	ite	eq
 8000b08:	2301      	moveq	r3, #1
 8000b0a:	2300      	movne	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b26:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <LL_I2C_ClearFlag_STOP>:
  *         CR1          PE            LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b085      	sub	sp, #20
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000b48:	68fb      	ldr	r3, [r7, #12]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f043 0201 	orr.w	r2, r3, #1
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	601a      	str	r2, [r3, #0]
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	b2db      	uxtb	r3, r3
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END I2C1_EV_IRQn 0 */
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END I2C1_ER_IRQn 0 */
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000be8:	b598      	push	{r3, r4, r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */
 // Check for address match event
	if (LL_I2C_IsActiveFlag_ADDR(I2C2))
 8000bec:	481e      	ldr	r0, [pc, #120]	@ (8000c68 <I2C2_EV_IRQHandler+0x80>)
 8000bee:	f7ff ff6f 	bl	8000ad0 <LL_I2C_IsActiveFlag_ADDR>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d005      	beq.n	8000c04 <I2C2_EV_IRQHandler+0x1c>
	{
		// Clear the ADDR flag and reset the buffer index
		LL_I2C_ClearFlag_ADDR(I2C2);
 8000bf8:	481b      	ldr	r0, [pc, #108]	@ (8000c68 <I2C2_EV_IRQHandler+0x80>)
 8000bfa:	f7ff ff8d 	bl	8000b18 <LL_I2C_ClearFlag_ADDR>
		rx_index = 0;
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <I2C2_EV_IRQHandler+0x84>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
	}

	// Check if data has been received
	if (LL_I2C_IsActiveFlag_RXNE(I2C2))
 8000c04:	4818      	ldr	r0, [pc, #96]	@ (8000c68 <I2C2_EV_IRQHandler+0x80>)
 8000c06:	f7ff ff51 	bl	8000aac <LL_I2C_IsActiveFlag_RXNE>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d016      	beq.n	8000c3e <I2C2_EV_IRQHandler+0x56>
	{
		// Read a byte and store it
		receivedData[rx_index++] = LL_I2C_ReceiveData8(I2C2);
 8000c10:	4b16      	ldr	r3, [pc, #88]	@ (8000c6c <I2C2_EV_IRQHandler+0x84>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	b2d1      	uxtb	r1, r2
 8000c1a:	4a14      	ldr	r2, [pc, #80]	@ (8000c6c <I2C2_EV_IRQHandler+0x84>)
 8000c1c:	7011      	strb	r1, [r2, #0]
 8000c1e:	461c      	mov	r4, r3
 8000c20:	4811      	ldr	r0, [pc, #68]	@ (8000c68 <I2C2_EV_IRQHandler+0x80>)
 8000c22:	f7ff ff9d 	bl	8000b60 <LL_I2C_ReceiveData8>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <I2C2_EV_IRQHandler+0x88>)
 8000c2c:	551a      	strb	r2, [r3, r4]
		if (rx_index >= sizeof(receivedData) - 1)  // Prevent buffer overflow
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <I2C2_EV_IRQHandler+0x84>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b1e      	cmp	r3, #30
 8000c36:	d902      	bls.n	8000c3e <I2C2_EV_IRQHandler+0x56>
		{
			rx_index = sizeof(receivedData) - 1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <I2C2_EV_IRQHandler+0x84>)
 8000c3a:	221f      	movs	r2, #31
 8000c3c:	701a      	strb	r2, [r3, #0]
		}
	}

	// Check for STOP condition
	if (LL_I2C_IsActiveFlag_STOP(I2C2))
 8000c3e:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <I2C2_EV_IRQHandler+0x80>)
 8000c40:	f7ff ff58 	bl	8000af4 <LL_I2C_IsActiveFlag_STOP>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00c      	beq.n	8000c64 <I2C2_EV_IRQHandler+0x7c>
	{
		LL_I2C_ClearFlag_STOP(I2C2);
 8000c4a:	4807      	ldr	r0, [pc, #28]	@ (8000c68 <I2C2_EV_IRQHandler+0x80>)
 8000c4c:	f7ff ff75 	bl	8000b3a <LL_I2C_ClearFlag_STOP>
		// Null-terminate the string and mark that data is ready
		receivedData[rx_index] = '\0';
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <I2C2_EV_IRQHandler+0x84>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <I2C2_EV_IRQHandler+0x88>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	5499      	strb	r1, [r3, r2]
		dataReady = 1;
 8000c5e:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <I2C2_EV_IRQHandler+0x8c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END I2C2_EV_IRQn 0 */
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd98      	pop	{r3, r4, r7, pc}
 8000c68:	40005800 	.word	0x40005800
 8000c6c:	2000007c 	.word	0x2000007c
 8000c70:	20000080 	.word	0x20000080
 8000c74:	2000007d 	.word	0x2000007d

08000c78 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END I2C2_ER_IRQn 0 */
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e00a      	b.n	8000cac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c96:	f3af 8000 	nop.w
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf0      	blt.n	8000c96 <_read+0x12>
  }

  return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ce4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr

08000cf2 <_isatty>:

int _isatty(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
	...

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f000 fe2a 	bl	80019a8 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20005000 	.word	0x20005000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	200000a0 	.word	0x200000a0
 8000d88:	200001f0 	.word	0x200001f0

08000d8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d98:	f7ff fff8 	bl	8000d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d9c:	480b      	ldr	r0, [pc, #44]	@ (8000dcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d9e:	490c      	ldr	r1, [pc, #48]	@ (8000dd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000da0:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a09      	ldr	r2, [pc, #36]	@ (8000dd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000db4:	4c09      	ldr	r4, [pc, #36]	@ (8000ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f000 fdf7 	bl	80019b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dc6:	f7ff fc7f 	bl	80006c8 <main>
  bx lr
 8000dca:	4770      	bx	lr
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000dd4:	080025d0 	.word	0x080025d0
  ldr r2, =_sbss
 8000dd8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ddc:	200001f0 	.word	0x200001f0

08000de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_2_IRQHandler>

08000de2 <LL_GPIO_SetPinMode>:
{
 8000de2:	b490      	push	{r4, r7}
 8000de4:	b088      	sub	sp, #32
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	461a      	mov	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	0e1b      	lsrs	r3, r3, #24
 8000df6:	4413      	add	r3, r2
 8000df8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000dfa:	6822      	ldr	r2, [r4, #0]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa93 f3a3 	rbit	r3, r3
 8000e06:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	fab3 f383 	clz	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	210f      	movs	r1, #15
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	fa93 f3a3 	rbit	r3, r3
 8000e26:	61bb      	str	r3, [r7, #24]
  return result;
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fab3 f383 	clz	r3, r3
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	6023      	str	r3, [r4, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	3720      	adds	r7, #32
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc90      	pop	{r4, r7}
 8000e44:	4770      	bx	lr

08000e46 <LL_GPIO_SetPinSpeed>:
{
 8000e46:	b490      	push	{r4, r7}
 8000e48:	b088      	sub	sp, #32
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	461a      	mov	r2, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	0e1b      	lsrs	r3, r3, #24
 8000e5a:	4413      	add	r3, r2
 8000e5c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000e5e:	6822      	ldr	r2, [r4, #0]
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	613b      	str	r3, [r7, #16]
  return result;
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	2103      	movs	r1, #3
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	401a      	ands	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	fa93 f3a3 	rbit	r3, r3
 8000e8a:	61bb      	str	r3, [r7, #24]
  return result;
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fab3 f383 	clz	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	6023      	str	r3, [r4, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc90      	pop	{r4, r7}
 8000ea8:	4770      	bx	lr

08000eaa <LL_GPIO_SetPinOutputType>:
{
 8000eaa:	b490      	push	{r4, r7}
 8000eac:	b088      	sub	sp, #32
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	0e1b      	lsrs	r3, r3, #24
 8000ebe:	4413      	add	r3, r2
 8000ec0:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000ec2:	6822      	ldr	r2, [r4, #0]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa93 f3a3 	rbit	r3, r3
 8000ece:	613b      	str	r3, [r7, #16]
  return result;
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	fab3 f383 	clz	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	2104      	movs	r1, #4
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	fa93 f3a3 	rbit	r3, r3
 8000eee:	61bb      	str	r3, [r7, #24]
  return result;
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fab3 f383 	clz	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	6023      	str	r3, [r4, #0]
}
 8000f04:	bf00      	nop
 8000f06:	3720      	adds	r7, #32
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc90      	pop	{r4, r7}
 8000f0c:	4770      	bx	lr

08000f0e <LL_GPIO_SetPinPull>:
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b087      	sub	sp, #28
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	43db      	mvns	r3, r3
 8000f24:	401a      	ands	r2, r3
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa93 f3a3 	rbit	r3, r3
 8000f32:	613b      	str	r3, [r7, #16]
  return result;
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	fab3 f383 	clz	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	408b      	lsls	r3, r1
 8000f42:	431a      	orrs	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	60da      	str	r2, [r3, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b088      	sub	sp, #32
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	0c1b      	lsrs	r3, r3, #16
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	60fb      	str	r3, [r7, #12]
  return result;
 8000f72:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000f74:	fab3 f383 	clz	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000f7c:	e044      	b.n	8001008 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	409a      	lsls	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	4013      	ands	r3, r2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d03a      	beq.n	8001002 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	2b07      	cmp	r3, #7
 8000f90:	d806      	bhi.n	8000fa0 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000f92:	f240 1201 	movw	r2, #257	@ 0x101
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	e008      	b.n	8000fb2 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	3b08      	subs	r3, #8
 8000fa4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000fb0:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d106      	bne.n	8000fc8 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	69b9      	ldr	r1, [r7, #24]
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffa3 	bl	8000f0e <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	69b9      	ldr	r1, [r7, #24]
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff06 	bl	8000de2 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d003      	beq.n	8000fe6 <LL_GPIO_Init+0x94>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b09      	cmp	r3, #9
 8000fe4:	d10d      	bne.n	8001002 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	461a      	mov	r2, r3
 8000fec:	69b9      	ldr	r1, [r7, #24]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff29 	bl	8000e46 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	69b9      	ldr	r1, [r7, #24]
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff54 	bl	8000eaa <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3301      	adds	r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1b4      	bne.n	8000f7e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <LL_I2C_Enable>:
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f043 0201 	orr.w	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	601a      	str	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <LL_I2C_Disable>:
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f023 0201 	bic.w	r2, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	601a      	str	r2, [r3, #0]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <LL_I2C_SetOwnAddress1>:
{
 800105a:	b480      	push	{r7}
 800105c:	b085      	sub	sp, #20
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800106e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	430a      	orrs	r2, r1
 8001078:	431a      	orrs	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	609a      	str	r2, [r3, #8]
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <LL_I2C_ConfigSpeed>:
{
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	4a41      	ldr	r2, [pc, #260]	@ (80011a8 <LL_I2C_ConfigSpeed+0x120>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0c9b      	lsrs	r3, r3, #18
 80010a8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	431a      	orrs	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4939      	ldr	r1, [pc, #228]	@ (80011ac <LL_I2C_ConfigSpeed+0x124>)
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d802      	bhi.n	80010d0 <LL_I2C_ConfigSpeed+0x48>
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	3301      	adds	r3, #1
 80010ce:	e009      	b.n	80010e4 <LL_I2C_ConfigSpeed+0x5c>
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80010d6:	fb01 f303 	mul.w	r3, r1, r3
 80010da:	4935      	ldr	r1, [pc, #212]	@ (80011b0 <LL_I2C_ConfigSpeed+0x128>)
 80010dc:	fba1 1303 	umull	r1, r3, r1, r3
 80010e0:	099b      	lsrs	r3, r3, #6
 80010e2:	3301      	adds	r3, #1
 80010e4:	431a      	orrs	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a2f      	ldr	r2, [pc, #188]	@ (80011ac <LL_I2C_ConfigSpeed+0x124>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d939      	bls.n	8001166 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d117      	bne.n	8001128 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800110a:	2b00      	cmp	r3, #0
 800110c:	d009      	beq.n	8001122 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800111c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001120:	e01d      	b.n	800115e <LL_I2C_ConfigSpeed+0xd6>
 8001122:	f248 0301 	movw	r3, #32769	@ 0x8001
 8001126:	e01a      	b.n	800115e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	009a      	lsls	r2, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	fbb2 f3f3 	udiv	r3, r2, r3
 800113a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00b      	beq.n	800115a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009a      	lsls	r2, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8001154:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001158:	e001      	b.n	800115e <LL_I2C_ConfigSpeed+0xd6>
 800115a:	f248 0301 	movw	r3, #32769	@ 0x8001
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	4313      	orrs	r3, r2
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e011      	b.n	800118a <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001170:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001174:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	fbb2 f3f3 	udiv	r3, r2, r3
 8001184:	e000      	b.n	8001188 <LL_I2C_ConfigSpeed+0x100>
 8001186:	2304      	movs	r3, #4
 8001188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8001192:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	431a      	orrs	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	61da      	str	r2, [r3, #28]
}
 800119e:	bf00      	nop
 80011a0:	371c      	adds	r7, #28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	431bde83 	.word	0x431bde83
 80011ac:	000186a0 	.word	0x000186a0
 80011b0:	10624dd3 	.word	0x10624dd3

080011b4 <LL_I2C_SetMode>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 021a 	bic.w	r2, r3, #26
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <LL_I2C_AcknowledgeNextData>:
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ff18 	bl	800103c <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f87b 	bl	800130c <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8001216:	6939      	ldr	r1, [r7, #16]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff31 	bl	8001088 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68d9      	ldr	r1, [r3, #12]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	461a      	mov	r2, r3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff12 	bl	800105a <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4619      	mov	r1, r3
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffb9 	bl	80011b4 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff feeb 	bl	800101e <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffc2 	bl	80011d8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <LL_RCC_GetSysClkSource>:
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <LL_RCC_GetSysClkSource+0x14>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 030c 	and.w	r3, r3, #12
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40021000 	.word	0x40021000

08001278 <LL_RCC_GetAHBPrescaler>:
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <LL_RCC_GetAHBPrescaler+0x14>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	40021000 	.word	0x40021000

08001290 <LL_RCC_GetAPB1Prescaler>:
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001294:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	40021000 	.word	0x40021000

080012a8 <LL_RCC_GetAPB2Prescaler>:
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <LL_RCC_GetAPB2Prescaler+0x14>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	40021000 	.word	0x40021000

080012c0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <LL_RCC_PLL_GetMainSource+0x14>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40021000 	.word	0x40021000

080012d8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <LL_RCC_PLL_GetMultiplicator+0x14>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000

080012f0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80012f4:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <LL_RCC_PLL_GetPrediv+0x18>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	0c5b      	lsrs	r3, r3, #17
 80012fa:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000

0800130c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001314:	f000 f820 	bl	8001358 <RCC_GetSystemClockFreq>
 8001318:	4602      	mov	r2, r0
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f83e 	bl	80013a4 <RCC_GetHCLKClockFreq>
 8001328:	4602      	mov	r2, r0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f84c 	bl	80013d0 <RCC_GetPCLK1ClockFreq>
 8001338:	4602      	mov	r2, r0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f858 	bl	80013f8 <RCC_GetPCLK2ClockFreq>
 8001348:	4602      	mov	r2, r0
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60da      	str	r2, [r3, #12]
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001362:	f7ff ff7d 	bl	8001260 <LL_RCC_GetSysClkSource>
 8001366:	4603      	mov	r3, r0
 8001368:	2b08      	cmp	r3, #8
 800136a:	d00c      	beq.n	8001386 <RCC_GetSystemClockFreq+0x2e>
 800136c:	2b08      	cmp	r3, #8
 800136e:	d80e      	bhi.n	800138e <RCC_GetSystemClockFreq+0x36>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <RCC_GetSystemClockFreq+0x22>
 8001374:	2b04      	cmp	r3, #4
 8001376:	d003      	beq.n	8001380 <RCC_GetSystemClockFreq+0x28>
 8001378:	e009      	b.n	800138e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <RCC_GetSystemClockFreq+0x48>)
 800137c:	607b      	str	r3, [r7, #4]
      break;
 800137e:	e009      	b.n	8001394 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <RCC_GetSystemClockFreq+0x48>)
 8001382:	607b      	str	r3, [r7, #4]
      break;
 8001384:	e006      	b.n	8001394 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001386:	f000 f84b 	bl	8001420 <RCC_PLL_GetFreqDomain_SYS>
 800138a:	6078      	str	r0, [r7, #4]
      break;
 800138c:	e002      	b.n	8001394 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800138e:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <RCC_GetSystemClockFreq+0x48>)
 8001390:	607b      	str	r3, [r7, #4]
      break;
 8001392:	bf00      	nop
  }

  return frequency;
 8001394:	687b      	ldr	r3, [r7, #4]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	007a1200 	.word	0x007a1200

080013a4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80013ac:	f7ff ff64 	bl	8001278 <LL_RCC_GetAHBPrescaler>
 80013b0:	4603      	mov	r3, r0
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <RCC_GetHCLKClockFreq+0x28>)
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	461a      	mov	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	40d3      	lsrs	r3, r2
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	0800257c 	.word	0x0800257c

080013d0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80013d8:	f7ff ff5a 	bl	8001290 <LL_RCC_GetAPB1Prescaler>
 80013dc:	4603      	mov	r3, r0
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <RCC_GetPCLK1ClockFreq+0x24>)
 80013e2:	5cd3      	ldrb	r3, [r2, r3]
 80013e4:	461a      	mov	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	40d3      	lsrs	r3, r2
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	0800258c 	.word	0x0800258c

080013f8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001400:	f7ff ff52 	bl	80012a8 <LL_RCC_GetAPB2Prescaler>
 8001404:	4603      	mov	r3, r0
 8001406:	0adb      	lsrs	r3, r3, #11
 8001408:	4a04      	ldr	r2, [pc, #16]	@ (800141c <RCC_GetPCLK2ClockFreq+0x24>)
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	461a      	mov	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	40d3      	lsrs	r3, r2
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	0800258c 	.word	0x0800258c

08001420 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800142e:	f7ff ff47 	bl	80012c0 <LL_RCC_PLL_GetMainSource>
 8001432:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001440:	d003      	beq.n	800144a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001442:	e00b      	b.n	800145c <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001444:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001446:	607b      	str	r3, [r7, #4]
      break;
 8001448:	e00b      	b.n	8001462 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800144a:	f7ff ff51 	bl	80012f0 <LL_RCC_PLL_GetPrediv>
 800144e:	4603      	mov	r3, r0
 8001450:	3301      	adds	r3, #1
 8001452:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001454:	fbb2 f3f3 	udiv	r3, r2, r3
 8001458:	607b      	str	r3, [r7, #4]
      break;
 800145a:	e002      	b.n	8001462 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800145c:	4b07      	ldr	r3, [pc, #28]	@ (800147c <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800145e:	607b      	str	r3, [r7, #4]
      break;
 8001460:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001462:	f7ff ff39 	bl	80012d8 <LL_RCC_PLL_GetMultiplicator>
 8001466:	4603      	mov	r3, r0
 8001468:	0c9b      	lsrs	r3, r3, #18
 800146a:	3302      	adds	r3, #2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	fb02 f303 	mul.w	r3, r2, r3
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	003d0900 	.word	0x003d0900
 8001480:	007a1200 	.word	0x007a1200

08001484 <LL_USART_IsEnabled>:
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001494:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001498:	bf0c      	ite	eq
 800149a:	2301      	moveq	r3, #1
 800149c:	2300      	movne	r3, #0
 800149e:	b2db      	uxtb	r3, r3
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <LL_USART_SetStopBitsLength>:
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	611a      	str	r2, [r3, #16]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <LL_USART_SetHWFlowCtrl>:
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	615a      	str	r2, [r3, #20]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
	...

080014f4 <LL_USART_SetBaudRate>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	009a      	lsls	r2, r3, #2
 800150a:	441a      	add	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	4a25      	ldr	r2, [pc, #148]	@ (80015ac <LL_USART_SetBaudRate+0xb8>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	b29b      	uxth	r3, r3
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	b299      	uxth	r1, r3
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	009a      	lsls	r2, r3, #2
 800152c:	441a      	add	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	fbb2 f2f3 	udiv	r2, r2, r3
 8001536:	4b1d      	ldr	r3, [pc, #116]	@ (80015ac <LL_USART_SetBaudRate+0xb8>)
 8001538:	fba3 0302 	umull	r0, r3, r3, r2
 800153c:	095b      	lsrs	r3, r3, #5
 800153e:	2064      	movs	r0, #100	@ 0x64
 8001540:	fb00 f303 	mul.w	r3, r0, r3
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	3332      	adds	r3, #50	@ 0x32
 800154a:	4a18      	ldr	r2, [pc, #96]	@ (80015ac <LL_USART_SetBaudRate+0xb8>)
 800154c:	fba2 2303 	umull	r2, r3, r2, r3
 8001550:	095b      	lsrs	r3, r3, #5
 8001552:	b29b      	uxth	r3, r3
 8001554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001558:	b29b      	uxth	r3, r3
 800155a:	440b      	add	r3, r1
 800155c:	b299      	uxth	r1, r3
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	009a      	lsls	r2, r3, #2
 8001568:	441a      	add	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <LL_USART_SetBaudRate+0xb8>)
 8001574:	fba3 0302 	umull	r0, r3, r3, r2
 8001578:	095b      	lsrs	r3, r3, #5
 800157a:	2064      	movs	r0, #100	@ 0x64
 800157c:	fb00 f303 	mul.w	r3, r0, r3
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	3332      	adds	r3, #50	@ 0x32
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <LL_USART_SetBaudRate+0xb8>)
 8001588:	fba2 2303 	umull	r2, r3, r2, r3
 800158c:	095b      	lsrs	r3, r3, #5
 800158e:	b29b      	uxth	r3, r3
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	b29b      	uxth	r3, r3
 8001596:	440b      	add	r3, r1
 8001598:	b29b      	uxth	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	609a      	str	r2, [r3, #8]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	51eb851f 	.word	0x51eb851f

080015b0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff5e 	bl	8001484 <LL_USART_IsEnabled>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d145      	bne.n	800165a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80015d6:	f023 030c 	bic.w	r3, r3, #12
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	6851      	ldr	r1, [r2, #4]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	68d2      	ldr	r2, [r2, #12]
 80015e2:	4311      	orrs	r1, r2
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	6912      	ldr	r2, [r2, #16]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff57 	bl	80014aa <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	4619      	mov	r1, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ff63 	bl	80014ce <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe7d 	bl	800130c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a13      	ldr	r2, [pc, #76]	@ (8001664 <LL_USART_Init+0xb4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d102      	bne.n	8001620 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	61bb      	str	r3, [r7, #24]
 800161e:	e00c      	b.n	800163a <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a11      	ldr	r2, [pc, #68]	@ (8001668 <LL_USART_Init+0xb8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d102      	bne.n	800162e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	e005      	b.n	800163a <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a0e      	ldr	r2, [pc, #56]	@ (800166c <LL_USART_Init+0xbc>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00c      	beq.n	800165a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8001648:	2300      	movs	r3, #0
 800164a:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001650:	461a      	mov	r2, r3
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff4d 	bl	80014f4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800165a:	7ffb      	ldrb	r3, [r7, #31]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40013800 	.word	0x40013800
 8001668:	40004400 	.word	0x40004400
 800166c:	40004800 	.word	0x40004800

08001670 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4a07      	ldr	r2, [pc, #28]	@ (80016a0 <LL_InitTick+0x30>)
 8001684:	3b01      	subs	r3, #1
 8001686:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <LL_InitTick+0x30>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168e:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <LL_InitTick+0x30>)
 8001690:	2205      	movs	r2, #5
 8001692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e010 	.word	0xe000e010

080016a4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80016ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ffdd 	bl	8001670 <LL_InitTick>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80016c8:	4a03      	ldr	r2, [pc, #12]	@ (80016d8 <LL_SetSystemCoreClock+0x18>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	20000000 	.word	0x20000000

080016dc <std>:
 80016dc:	2300      	movs	r3, #0
 80016de:	b510      	push	{r4, lr}
 80016e0:	4604      	mov	r4, r0
 80016e2:	e9c0 3300 	strd	r3, r3, [r0]
 80016e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016ea:	6083      	str	r3, [r0, #8]
 80016ec:	8181      	strh	r1, [r0, #12]
 80016ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80016f0:	81c2      	strh	r2, [r0, #14]
 80016f2:	6183      	str	r3, [r0, #24]
 80016f4:	4619      	mov	r1, r3
 80016f6:	2208      	movs	r2, #8
 80016f8:	305c      	adds	r0, #92	@ 0x5c
 80016fa:	f000 f906 	bl	800190a <memset>
 80016fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <std+0x58>)
 8001700:	6224      	str	r4, [r4, #32]
 8001702:	6263      	str	r3, [r4, #36]	@ 0x24
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <std+0x5c>)
 8001706:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <std+0x60>)
 800170a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <std+0x64>)
 800170e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <std+0x68>)
 8001712:	429c      	cmp	r4, r3
 8001714:	d006      	beq.n	8001724 <std+0x48>
 8001716:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800171a:	4294      	cmp	r4, r2
 800171c:	d002      	beq.n	8001724 <std+0x48>
 800171e:	33d0      	adds	r3, #208	@ 0xd0
 8001720:	429c      	cmp	r4, r3
 8001722:	d105      	bne.n	8001730 <std+0x54>
 8001724:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800172c:	f000 b966 	b.w	80019fc <__retarget_lock_init_recursive>
 8001730:	bd10      	pop	{r4, pc}
 8001732:	bf00      	nop
 8001734:	08001885 	.word	0x08001885
 8001738:	080018a7 	.word	0x080018a7
 800173c:	080018df 	.word	0x080018df
 8001740:	08001903 	.word	0x08001903
 8001744:	200000a4 	.word	0x200000a4

08001748 <stdio_exit_handler>:
 8001748:	4a02      	ldr	r2, [pc, #8]	@ (8001754 <stdio_exit_handler+0xc>)
 800174a:	4903      	ldr	r1, [pc, #12]	@ (8001758 <stdio_exit_handler+0x10>)
 800174c:	4803      	ldr	r0, [pc, #12]	@ (800175c <stdio_exit_handler+0x14>)
 800174e:	f000 b869 	b.w	8001824 <_fwalk_sglue>
 8001752:	bf00      	nop
 8001754:	20000004 	.word	0x20000004
 8001758:	08002295 	.word	0x08002295
 800175c:	20000014 	.word	0x20000014

08001760 <cleanup_stdio>:
 8001760:	6841      	ldr	r1, [r0, #4]
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <cleanup_stdio+0x34>)
 8001764:	b510      	push	{r4, lr}
 8001766:	4299      	cmp	r1, r3
 8001768:	4604      	mov	r4, r0
 800176a:	d001      	beq.n	8001770 <cleanup_stdio+0x10>
 800176c:	f000 fd92 	bl	8002294 <_fflush_r>
 8001770:	68a1      	ldr	r1, [r4, #8]
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <cleanup_stdio+0x38>)
 8001774:	4299      	cmp	r1, r3
 8001776:	d002      	beq.n	800177e <cleanup_stdio+0x1e>
 8001778:	4620      	mov	r0, r4
 800177a:	f000 fd8b 	bl	8002294 <_fflush_r>
 800177e:	68e1      	ldr	r1, [r4, #12]
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <cleanup_stdio+0x3c>)
 8001782:	4299      	cmp	r1, r3
 8001784:	d004      	beq.n	8001790 <cleanup_stdio+0x30>
 8001786:	4620      	mov	r0, r4
 8001788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800178c:	f000 bd82 	b.w	8002294 <_fflush_r>
 8001790:	bd10      	pop	{r4, pc}
 8001792:	bf00      	nop
 8001794:	200000a4 	.word	0x200000a4
 8001798:	2000010c 	.word	0x2000010c
 800179c:	20000174 	.word	0x20000174

080017a0 <global_stdio_init.part.0>:
 80017a0:	b510      	push	{r4, lr}
 80017a2:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <global_stdio_init.part.0+0x30>)
 80017a4:	4c0b      	ldr	r4, [pc, #44]	@ (80017d4 <global_stdio_init.part.0+0x34>)
 80017a6:	4a0c      	ldr	r2, [pc, #48]	@ (80017d8 <global_stdio_init.part.0+0x38>)
 80017a8:	4620      	mov	r0, r4
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	2104      	movs	r1, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	f7ff ff94 	bl	80016dc <std>
 80017b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80017b8:	2201      	movs	r2, #1
 80017ba:	2109      	movs	r1, #9
 80017bc:	f7ff ff8e 	bl	80016dc <std>
 80017c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80017c4:	2202      	movs	r2, #2
 80017c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017ca:	2112      	movs	r1, #18
 80017cc:	f7ff bf86 	b.w	80016dc <std>
 80017d0:	200001dc 	.word	0x200001dc
 80017d4:	200000a4 	.word	0x200000a4
 80017d8:	08001749 	.word	0x08001749

080017dc <__sfp_lock_acquire>:
 80017dc:	4801      	ldr	r0, [pc, #4]	@ (80017e4 <__sfp_lock_acquire+0x8>)
 80017de:	f000 b90e 	b.w	80019fe <__retarget_lock_acquire_recursive>
 80017e2:	bf00      	nop
 80017e4:	200001e5 	.word	0x200001e5

080017e8 <__sfp_lock_release>:
 80017e8:	4801      	ldr	r0, [pc, #4]	@ (80017f0 <__sfp_lock_release+0x8>)
 80017ea:	f000 b909 	b.w	8001a00 <__retarget_lock_release_recursive>
 80017ee:	bf00      	nop
 80017f0:	200001e5 	.word	0x200001e5

080017f4 <__sinit>:
 80017f4:	b510      	push	{r4, lr}
 80017f6:	4604      	mov	r4, r0
 80017f8:	f7ff fff0 	bl	80017dc <__sfp_lock_acquire>
 80017fc:	6a23      	ldr	r3, [r4, #32]
 80017fe:	b11b      	cbz	r3, 8001808 <__sinit+0x14>
 8001800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001804:	f7ff bff0 	b.w	80017e8 <__sfp_lock_release>
 8001808:	4b04      	ldr	r3, [pc, #16]	@ (800181c <__sinit+0x28>)
 800180a:	6223      	str	r3, [r4, #32]
 800180c:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <__sinit+0x2c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f5      	bne.n	8001800 <__sinit+0xc>
 8001814:	f7ff ffc4 	bl	80017a0 <global_stdio_init.part.0>
 8001818:	e7f2      	b.n	8001800 <__sinit+0xc>
 800181a:	bf00      	nop
 800181c:	08001761 	.word	0x08001761
 8001820:	200001dc 	.word	0x200001dc

08001824 <_fwalk_sglue>:
 8001824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001828:	4607      	mov	r7, r0
 800182a:	4688      	mov	r8, r1
 800182c:	4614      	mov	r4, r2
 800182e:	2600      	movs	r6, #0
 8001830:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001834:	f1b9 0901 	subs.w	r9, r9, #1
 8001838:	d505      	bpl.n	8001846 <_fwalk_sglue+0x22>
 800183a:	6824      	ldr	r4, [r4, #0]
 800183c:	2c00      	cmp	r4, #0
 800183e:	d1f7      	bne.n	8001830 <_fwalk_sglue+0xc>
 8001840:	4630      	mov	r0, r6
 8001842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001846:	89ab      	ldrh	r3, [r5, #12]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d907      	bls.n	800185c <_fwalk_sglue+0x38>
 800184c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001850:	3301      	adds	r3, #1
 8001852:	d003      	beq.n	800185c <_fwalk_sglue+0x38>
 8001854:	4629      	mov	r1, r5
 8001856:	4638      	mov	r0, r7
 8001858:	47c0      	blx	r8
 800185a:	4306      	orrs	r6, r0
 800185c:	3568      	adds	r5, #104	@ 0x68
 800185e:	e7e9      	b.n	8001834 <_fwalk_sglue+0x10>

08001860 <iprintf>:
 8001860:	b40f      	push	{r0, r1, r2, r3}
 8001862:	b507      	push	{r0, r1, r2, lr}
 8001864:	4906      	ldr	r1, [pc, #24]	@ (8001880 <iprintf+0x20>)
 8001866:	ab04      	add	r3, sp, #16
 8001868:	6808      	ldr	r0, [r1, #0]
 800186a:	f853 2b04 	ldr.w	r2, [r3], #4
 800186e:	6881      	ldr	r1, [r0, #8]
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	f000 f9e5 	bl	8001c40 <_vfiprintf_r>
 8001876:	b003      	add	sp, #12
 8001878:	f85d eb04 	ldr.w	lr, [sp], #4
 800187c:	b004      	add	sp, #16
 800187e:	4770      	bx	lr
 8001880:	20000010 	.word	0x20000010

08001884 <__sread>:
 8001884:	b510      	push	{r4, lr}
 8001886:	460c      	mov	r4, r1
 8001888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800188c:	f000 f868 	bl	8001960 <_read_r>
 8001890:	2800      	cmp	r0, #0
 8001892:	bfab      	itete	ge
 8001894:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001896:	89a3      	ldrhlt	r3, [r4, #12]
 8001898:	181b      	addge	r3, r3, r0
 800189a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800189e:	bfac      	ite	ge
 80018a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80018a2:	81a3      	strhlt	r3, [r4, #12]
 80018a4:	bd10      	pop	{r4, pc}

080018a6 <__swrite>:
 80018a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018aa:	461f      	mov	r7, r3
 80018ac:	898b      	ldrh	r3, [r1, #12]
 80018ae:	4605      	mov	r5, r0
 80018b0:	05db      	lsls	r3, r3, #23
 80018b2:	460c      	mov	r4, r1
 80018b4:	4616      	mov	r6, r2
 80018b6:	d505      	bpl.n	80018c4 <__swrite+0x1e>
 80018b8:	2302      	movs	r3, #2
 80018ba:	2200      	movs	r2, #0
 80018bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018c0:	f000 f83c 	bl	800193c <_lseek_r>
 80018c4:	89a3      	ldrh	r3, [r4, #12]
 80018c6:	4632      	mov	r2, r6
 80018c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018cc:	81a3      	strh	r3, [r4, #12]
 80018ce:	4628      	mov	r0, r5
 80018d0:	463b      	mov	r3, r7
 80018d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80018d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018da:	f000 b853 	b.w	8001984 <_write_r>

080018de <__sseek>:
 80018de:	b510      	push	{r4, lr}
 80018e0:	460c      	mov	r4, r1
 80018e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018e6:	f000 f829 	bl	800193c <_lseek_r>
 80018ea:	1c43      	adds	r3, r0, #1
 80018ec:	89a3      	ldrh	r3, [r4, #12]
 80018ee:	bf15      	itete	ne
 80018f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80018f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80018f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80018fa:	81a3      	strheq	r3, [r4, #12]
 80018fc:	bf18      	it	ne
 80018fe:	81a3      	strhne	r3, [r4, #12]
 8001900:	bd10      	pop	{r4, pc}

08001902 <__sclose>:
 8001902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001906:	f000 b809 	b.w	800191c <_close_r>

0800190a <memset>:
 800190a:	4603      	mov	r3, r0
 800190c:	4402      	add	r2, r0
 800190e:	4293      	cmp	r3, r2
 8001910:	d100      	bne.n	8001914 <memset+0xa>
 8001912:	4770      	bx	lr
 8001914:	f803 1b01 	strb.w	r1, [r3], #1
 8001918:	e7f9      	b.n	800190e <memset+0x4>
	...

0800191c <_close_r>:
 800191c:	b538      	push	{r3, r4, r5, lr}
 800191e:	2300      	movs	r3, #0
 8001920:	4d05      	ldr	r5, [pc, #20]	@ (8001938 <_close_r+0x1c>)
 8001922:	4604      	mov	r4, r0
 8001924:	4608      	mov	r0, r1
 8001926:	602b      	str	r3, [r5, #0]
 8001928:	f7ff f9c9 	bl	8000cbe <_close>
 800192c:	1c43      	adds	r3, r0, #1
 800192e:	d102      	bne.n	8001936 <_close_r+0x1a>
 8001930:	682b      	ldr	r3, [r5, #0]
 8001932:	b103      	cbz	r3, 8001936 <_close_r+0x1a>
 8001934:	6023      	str	r3, [r4, #0]
 8001936:	bd38      	pop	{r3, r4, r5, pc}
 8001938:	200001e0 	.word	0x200001e0

0800193c <_lseek_r>:
 800193c:	b538      	push	{r3, r4, r5, lr}
 800193e:	4604      	mov	r4, r0
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	2200      	movs	r2, #0
 8001946:	4d05      	ldr	r5, [pc, #20]	@ (800195c <_lseek_r+0x20>)
 8001948:	602a      	str	r2, [r5, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	f7ff f9db 	bl	8000d06 <_lseek>
 8001950:	1c43      	adds	r3, r0, #1
 8001952:	d102      	bne.n	800195a <_lseek_r+0x1e>
 8001954:	682b      	ldr	r3, [r5, #0]
 8001956:	b103      	cbz	r3, 800195a <_lseek_r+0x1e>
 8001958:	6023      	str	r3, [r4, #0]
 800195a:	bd38      	pop	{r3, r4, r5, pc}
 800195c:	200001e0 	.word	0x200001e0

08001960 <_read_r>:
 8001960:	b538      	push	{r3, r4, r5, lr}
 8001962:	4604      	mov	r4, r0
 8001964:	4608      	mov	r0, r1
 8001966:	4611      	mov	r1, r2
 8001968:	2200      	movs	r2, #0
 800196a:	4d05      	ldr	r5, [pc, #20]	@ (8001980 <_read_r+0x20>)
 800196c:	602a      	str	r2, [r5, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	f7ff f988 	bl	8000c84 <_read>
 8001974:	1c43      	adds	r3, r0, #1
 8001976:	d102      	bne.n	800197e <_read_r+0x1e>
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	b103      	cbz	r3, 800197e <_read_r+0x1e>
 800197c:	6023      	str	r3, [r4, #0]
 800197e:	bd38      	pop	{r3, r4, r5, pc}
 8001980:	200001e0 	.word	0x200001e0

08001984 <_write_r>:
 8001984:	b538      	push	{r3, r4, r5, lr}
 8001986:	4604      	mov	r4, r0
 8001988:	4608      	mov	r0, r1
 800198a:	4611      	mov	r1, r2
 800198c:	2200      	movs	r2, #0
 800198e:	4d05      	ldr	r5, [pc, #20]	@ (80019a4 <_write_r+0x20>)
 8001990:	602a      	str	r2, [r5, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	f7fe fe6a 	bl	800066c <_write>
 8001998:	1c43      	adds	r3, r0, #1
 800199a:	d102      	bne.n	80019a2 <_write_r+0x1e>
 800199c:	682b      	ldr	r3, [r5, #0]
 800199e:	b103      	cbz	r3, 80019a2 <_write_r+0x1e>
 80019a0:	6023      	str	r3, [r4, #0]
 80019a2:	bd38      	pop	{r3, r4, r5, pc}
 80019a4:	200001e0 	.word	0x200001e0

080019a8 <__errno>:
 80019a8:	4b01      	ldr	r3, [pc, #4]	@ (80019b0 <__errno+0x8>)
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000010 	.word	0x20000010

080019b4 <__libc_init_array>:
 80019b4:	b570      	push	{r4, r5, r6, lr}
 80019b6:	2600      	movs	r6, #0
 80019b8:	4d0c      	ldr	r5, [pc, #48]	@ (80019ec <__libc_init_array+0x38>)
 80019ba:	4c0d      	ldr	r4, [pc, #52]	@ (80019f0 <__libc_init_array+0x3c>)
 80019bc:	1b64      	subs	r4, r4, r5
 80019be:	10a4      	asrs	r4, r4, #2
 80019c0:	42a6      	cmp	r6, r4
 80019c2:	d109      	bne.n	80019d8 <__libc_init_array+0x24>
 80019c4:	f000 fdc4 	bl	8002550 <_init>
 80019c8:	2600      	movs	r6, #0
 80019ca:	4d0a      	ldr	r5, [pc, #40]	@ (80019f4 <__libc_init_array+0x40>)
 80019cc:	4c0a      	ldr	r4, [pc, #40]	@ (80019f8 <__libc_init_array+0x44>)
 80019ce:	1b64      	subs	r4, r4, r5
 80019d0:	10a4      	asrs	r4, r4, #2
 80019d2:	42a6      	cmp	r6, r4
 80019d4:	d105      	bne.n	80019e2 <__libc_init_array+0x2e>
 80019d6:	bd70      	pop	{r4, r5, r6, pc}
 80019d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80019dc:	4798      	blx	r3
 80019de:	3601      	adds	r6, #1
 80019e0:	e7ee      	b.n	80019c0 <__libc_init_array+0xc>
 80019e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80019e6:	4798      	blx	r3
 80019e8:	3601      	adds	r6, #1
 80019ea:	e7f2      	b.n	80019d2 <__libc_init_array+0x1e>
 80019ec:	080025c8 	.word	0x080025c8
 80019f0:	080025c8 	.word	0x080025c8
 80019f4:	080025c8 	.word	0x080025c8
 80019f8:	080025cc 	.word	0x080025cc

080019fc <__retarget_lock_init_recursive>:
 80019fc:	4770      	bx	lr

080019fe <__retarget_lock_acquire_recursive>:
 80019fe:	4770      	bx	lr

08001a00 <__retarget_lock_release_recursive>:
 8001a00:	4770      	bx	lr
	...

08001a04 <_free_r>:
 8001a04:	b538      	push	{r3, r4, r5, lr}
 8001a06:	4605      	mov	r5, r0
 8001a08:	2900      	cmp	r1, #0
 8001a0a:	d040      	beq.n	8001a8e <_free_r+0x8a>
 8001a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a10:	1f0c      	subs	r4, r1, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bfb8      	it	lt
 8001a16:	18e4      	addlt	r4, r4, r3
 8001a18:	f000 f8de 	bl	8001bd8 <__malloc_lock>
 8001a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8001a90 <_free_r+0x8c>)
 8001a1e:	6813      	ldr	r3, [r2, #0]
 8001a20:	b933      	cbnz	r3, 8001a30 <_free_r+0x2c>
 8001a22:	6063      	str	r3, [r4, #4]
 8001a24:	6014      	str	r4, [r2, #0]
 8001a26:	4628      	mov	r0, r5
 8001a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a2c:	f000 b8da 	b.w	8001be4 <__malloc_unlock>
 8001a30:	42a3      	cmp	r3, r4
 8001a32:	d908      	bls.n	8001a46 <_free_r+0x42>
 8001a34:	6820      	ldr	r0, [r4, #0]
 8001a36:	1821      	adds	r1, r4, r0
 8001a38:	428b      	cmp	r3, r1
 8001a3a:	bf01      	itttt	eq
 8001a3c:	6819      	ldreq	r1, [r3, #0]
 8001a3e:	685b      	ldreq	r3, [r3, #4]
 8001a40:	1809      	addeq	r1, r1, r0
 8001a42:	6021      	streq	r1, [r4, #0]
 8001a44:	e7ed      	b.n	8001a22 <_free_r+0x1e>
 8001a46:	461a      	mov	r2, r3
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	b10b      	cbz	r3, 8001a50 <_free_r+0x4c>
 8001a4c:	42a3      	cmp	r3, r4
 8001a4e:	d9fa      	bls.n	8001a46 <_free_r+0x42>
 8001a50:	6811      	ldr	r1, [r2, #0]
 8001a52:	1850      	adds	r0, r2, r1
 8001a54:	42a0      	cmp	r0, r4
 8001a56:	d10b      	bne.n	8001a70 <_free_r+0x6c>
 8001a58:	6820      	ldr	r0, [r4, #0]
 8001a5a:	4401      	add	r1, r0
 8001a5c:	1850      	adds	r0, r2, r1
 8001a5e:	4283      	cmp	r3, r0
 8001a60:	6011      	str	r1, [r2, #0]
 8001a62:	d1e0      	bne.n	8001a26 <_free_r+0x22>
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4408      	add	r0, r1
 8001a6a:	6010      	str	r0, [r2, #0]
 8001a6c:	6053      	str	r3, [r2, #4]
 8001a6e:	e7da      	b.n	8001a26 <_free_r+0x22>
 8001a70:	d902      	bls.n	8001a78 <_free_r+0x74>
 8001a72:	230c      	movs	r3, #12
 8001a74:	602b      	str	r3, [r5, #0]
 8001a76:	e7d6      	b.n	8001a26 <_free_r+0x22>
 8001a78:	6820      	ldr	r0, [r4, #0]
 8001a7a:	1821      	adds	r1, r4, r0
 8001a7c:	428b      	cmp	r3, r1
 8001a7e:	bf01      	itttt	eq
 8001a80:	6819      	ldreq	r1, [r3, #0]
 8001a82:	685b      	ldreq	r3, [r3, #4]
 8001a84:	1809      	addeq	r1, r1, r0
 8001a86:	6021      	streq	r1, [r4, #0]
 8001a88:	6063      	str	r3, [r4, #4]
 8001a8a:	6054      	str	r4, [r2, #4]
 8001a8c:	e7cb      	b.n	8001a26 <_free_r+0x22>
 8001a8e:	bd38      	pop	{r3, r4, r5, pc}
 8001a90:	200001ec 	.word	0x200001ec

08001a94 <sbrk_aligned>:
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	4e0f      	ldr	r6, [pc, #60]	@ (8001ad4 <sbrk_aligned+0x40>)
 8001a98:	460c      	mov	r4, r1
 8001a9a:	6831      	ldr	r1, [r6, #0]
 8001a9c:	4605      	mov	r5, r0
 8001a9e:	b911      	cbnz	r1, 8001aa6 <sbrk_aligned+0x12>
 8001aa0:	f000 fcb4 	bl	800240c <_sbrk_r>
 8001aa4:	6030      	str	r0, [r6, #0]
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	f000 fcaf 	bl	800240c <_sbrk_r>
 8001aae:	1c43      	adds	r3, r0, #1
 8001ab0:	d103      	bne.n	8001aba <sbrk_aligned+0x26>
 8001ab2:	f04f 34ff 	mov.w	r4, #4294967295
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	bd70      	pop	{r4, r5, r6, pc}
 8001aba:	1cc4      	adds	r4, r0, #3
 8001abc:	f024 0403 	bic.w	r4, r4, #3
 8001ac0:	42a0      	cmp	r0, r4
 8001ac2:	d0f8      	beq.n	8001ab6 <sbrk_aligned+0x22>
 8001ac4:	1a21      	subs	r1, r4, r0
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	f000 fca0 	bl	800240c <_sbrk_r>
 8001acc:	3001      	adds	r0, #1
 8001ace:	d1f2      	bne.n	8001ab6 <sbrk_aligned+0x22>
 8001ad0:	e7ef      	b.n	8001ab2 <sbrk_aligned+0x1e>
 8001ad2:	bf00      	nop
 8001ad4:	200001e8 	.word	0x200001e8

08001ad8 <_malloc_r>:
 8001ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001adc:	1ccd      	adds	r5, r1, #3
 8001ade:	f025 0503 	bic.w	r5, r5, #3
 8001ae2:	3508      	adds	r5, #8
 8001ae4:	2d0c      	cmp	r5, #12
 8001ae6:	bf38      	it	cc
 8001ae8:	250c      	movcc	r5, #12
 8001aea:	2d00      	cmp	r5, #0
 8001aec:	4606      	mov	r6, r0
 8001aee:	db01      	blt.n	8001af4 <_malloc_r+0x1c>
 8001af0:	42a9      	cmp	r1, r5
 8001af2:	d904      	bls.n	8001afe <_malloc_r+0x26>
 8001af4:	230c      	movs	r3, #12
 8001af6:	6033      	str	r3, [r6, #0]
 8001af8:	2000      	movs	r0, #0
 8001afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001afe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001bd4 <_malloc_r+0xfc>
 8001b02:	f000 f869 	bl	8001bd8 <__malloc_lock>
 8001b06:	f8d8 3000 	ldr.w	r3, [r8]
 8001b0a:	461c      	mov	r4, r3
 8001b0c:	bb44      	cbnz	r4, 8001b60 <_malloc_r+0x88>
 8001b0e:	4629      	mov	r1, r5
 8001b10:	4630      	mov	r0, r6
 8001b12:	f7ff ffbf 	bl	8001a94 <sbrk_aligned>
 8001b16:	1c43      	adds	r3, r0, #1
 8001b18:	4604      	mov	r4, r0
 8001b1a:	d158      	bne.n	8001bce <_malloc_r+0xf6>
 8001b1c:	f8d8 4000 	ldr.w	r4, [r8]
 8001b20:	4627      	mov	r7, r4
 8001b22:	2f00      	cmp	r7, #0
 8001b24:	d143      	bne.n	8001bae <_malloc_r+0xd6>
 8001b26:	2c00      	cmp	r4, #0
 8001b28:	d04b      	beq.n	8001bc2 <_malloc_r+0xea>
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	4639      	mov	r1, r7
 8001b2e:	4630      	mov	r0, r6
 8001b30:	eb04 0903 	add.w	r9, r4, r3
 8001b34:	f000 fc6a 	bl	800240c <_sbrk_r>
 8001b38:	4581      	cmp	r9, r0
 8001b3a:	d142      	bne.n	8001bc2 <_malloc_r+0xea>
 8001b3c:	6821      	ldr	r1, [r4, #0]
 8001b3e:	4630      	mov	r0, r6
 8001b40:	1a6d      	subs	r5, r5, r1
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7ff ffa6 	bl	8001a94 <sbrk_aligned>
 8001b48:	3001      	adds	r0, #1
 8001b4a:	d03a      	beq.n	8001bc2 <_malloc_r+0xea>
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	442b      	add	r3, r5
 8001b50:	6023      	str	r3, [r4, #0]
 8001b52:	f8d8 3000 	ldr.w	r3, [r8]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	bb62      	cbnz	r2, 8001bb4 <_malloc_r+0xdc>
 8001b5a:	f8c8 7000 	str.w	r7, [r8]
 8001b5e:	e00f      	b.n	8001b80 <_malloc_r+0xa8>
 8001b60:	6822      	ldr	r2, [r4, #0]
 8001b62:	1b52      	subs	r2, r2, r5
 8001b64:	d420      	bmi.n	8001ba8 <_malloc_r+0xd0>
 8001b66:	2a0b      	cmp	r2, #11
 8001b68:	d917      	bls.n	8001b9a <_malloc_r+0xc2>
 8001b6a:	1961      	adds	r1, r4, r5
 8001b6c:	42a3      	cmp	r3, r4
 8001b6e:	6025      	str	r5, [r4, #0]
 8001b70:	bf18      	it	ne
 8001b72:	6059      	strne	r1, [r3, #4]
 8001b74:	6863      	ldr	r3, [r4, #4]
 8001b76:	bf08      	it	eq
 8001b78:	f8c8 1000 	streq.w	r1, [r8]
 8001b7c:	5162      	str	r2, [r4, r5]
 8001b7e:	604b      	str	r3, [r1, #4]
 8001b80:	4630      	mov	r0, r6
 8001b82:	f000 f82f 	bl	8001be4 <__malloc_unlock>
 8001b86:	f104 000b 	add.w	r0, r4, #11
 8001b8a:	1d23      	adds	r3, r4, #4
 8001b8c:	f020 0007 	bic.w	r0, r0, #7
 8001b90:	1ac2      	subs	r2, r0, r3
 8001b92:	bf1c      	itt	ne
 8001b94:	1a1b      	subne	r3, r3, r0
 8001b96:	50a3      	strne	r3, [r4, r2]
 8001b98:	e7af      	b.n	8001afa <_malloc_r+0x22>
 8001b9a:	6862      	ldr	r2, [r4, #4]
 8001b9c:	42a3      	cmp	r3, r4
 8001b9e:	bf0c      	ite	eq
 8001ba0:	f8c8 2000 	streq.w	r2, [r8]
 8001ba4:	605a      	strne	r2, [r3, #4]
 8001ba6:	e7eb      	b.n	8001b80 <_malloc_r+0xa8>
 8001ba8:	4623      	mov	r3, r4
 8001baa:	6864      	ldr	r4, [r4, #4]
 8001bac:	e7ae      	b.n	8001b0c <_malloc_r+0x34>
 8001bae:	463c      	mov	r4, r7
 8001bb0:	687f      	ldr	r7, [r7, #4]
 8001bb2:	e7b6      	b.n	8001b22 <_malloc_r+0x4a>
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	42a3      	cmp	r3, r4
 8001bba:	d1fb      	bne.n	8001bb4 <_malloc_r+0xdc>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6053      	str	r3, [r2, #4]
 8001bc0:	e7de      	b.n	8001b80 <_malloc_r+0xa8>
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	4630      	mov	r0, r6
 8001bc6:	6033      	str	r3, [r6, #0]
 8001bc8:	f000 f80c 	bl	8001be4 <__malloc_unlock>
 8001bcc:	e794      	b.n	8001af8 <_malloc_r+0x20>
 8001bce:	6005      	str	r5, [r0, #0]
 8001bd0:	e7d6      	b.n	8001b80 <_malloc_r+0xa8>
 8001bd2:	bf00      	nop
 8001bd4:	200001ec 	.word	0x200001ec

08001bd8 <__malloc_lock>:
 8001bd8:	4801      	ldr	r0, [pc, #4]	@ (8001be0 <__malloc_lock+0x8>)
 8001bda:	f7ff bf10 	b.w	80019fe <__retarget_lock_acquire_recursive>
 8001bde:	bf00      	nop
 8001be0:	200001e4 	.word	0x200001e4

08001be4 <__malloc_unlock>:
 8001be4:	4801      	ldr	r0, [pc, #4]	@ (8001bec <__malloc_unlock+0x8>)
 8001be6:	f7ff bf0b 	b.w	8001a00 <__retarget_lock_release_recursive>
 8001bea:	bf00      	nop
 8001bec:	200001e4 	.word	0x200001e4

08001bf0 <__sfputc_r>:
 8001bf0:	6893      	ldr	r3, [r2, #8]
 8001bf2:	b410      	push	{r4}
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	6093      	str	r3, [r2, #8]
 8001bfa:	da07      	bge.n	8001c0c <__sfputc_r+0x1c>
 8001bfc:	6994      	ldr	r4, [r2, #24]
 8001bfe:	42a3      	cmp	r3, r4
 8001c00:	db01      	blt.n	8001c06 <__sfputc_r+0x16>
 8001c02:	290a      	cmp	r1, #10
 8001c04:	d102      	bne.n	8001c0c <__sfputc_r+0x1c>
 8001c06:	bc10      	pop	{r4}
 8001c08:	f000 bb6c 	b.w	80022e4 <__swbuf_r>
 8001c0c:	6813      	ldr	r3, [r2, #0]
 8001c0e:	1c58      	adds	r0, r3, #1
 8001c10:	6010      	str	r0, [r2, #0]
 8001c12:	7019      	strb	r1, [r3, #0]
 8001c14:	4608      	mov	r0, r1
 8001c16:	bc10      	pop	{r4}
 8001c18:	4770      	bx	lr

08001c1a <__sfputs_r>:
 8001c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1c:	4606      	mov	r6, r0
 8001c1e:	460f      	mov	r7, r1
 8001c20:	4614      	mov	r4, r2
 8001c22:	18d5      	adds	r5, r2, r3
 8001c24:	42ac      	cmp	r4, r5
 8001c26:	d101      	bne.n	8001c2c <__sfputs_r+0x12>
 8001c28:	2000      	movs	r0, #0
 8001c2a:	e007      	b.n	8001c3c <__sfputs_r+0x22>
 8001c2c:	463a      	mov	r2, r7
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c34:	f7ff ffdc 	bl	8001bf0 <__sfputc_r>
 8001c38:	1c43      	adds	r3, r0, #1
 8001c3a:	d1f3      	bne.n	8001c24 <__sfputs_r+0xa>
 8001c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c40 <_vfiprintf_r>:
 8001c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c44:	460d      	mov	r5, r1
 8001c46:	4614      	mov	r4, r2
 8001c48:	4698      	mov	r8, r3
 8001c4a:	4606      	mov	r6, r0
 8001c4c:	b09d      	sub	sp, #116	@ 0x74
 8001c4e:	b118      	cbz	r0, 8001c58 <_vfiprintf_r+0x18>
 8001c50:	6a03      	ldr	r3, [r0, #32]
 8001c52:	b90b      	cbnz	r3, 8001c58 <_vfiprintf_r+0x18>
 8001c54:	f7ff fdce 	bl	80017f4 <__sinit>
 8001c58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c5a:	07d9      	lsls	r1, r3, #31
 8001c5c:	d405      	bmi.n	8001c6a <_vfiprintf_r+0x2a>
 8001c5e:	89ab      	ldrh	r3, [r5, #12]
 8001c60:	059a      	lsls	r2, r3, #22
 8001c62:	d402      	bmi.n	8001c6a <_vfiprintf_r+0x2a>
 8001c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c66:	f7ff feca 	bl	80019fe <__retarget_lock_acquire_recursive>
 8001c6a:	89ab      	ldrh	r3, [r5, #12]
 8001c6c:	071b      	lsls	r3, r3, #28
 8001c6e:	d501      	bpl.n	8001c74 <_vfiprintf_r+0x34>
 8001c70:	692b      	ldr	r3, [r5, #16]
 8001c72:	b99b      	cbnz	r3, 8001c9c <_vfiprintf_r+0x5c>
 8001c74:	4629      	mov	r1, r5
 8001c76:	4630      	mov	r0, r6
 8001c78:	f000 fb72 	bl	8002360 <__swsetup_r>
 8001c7c:	b170      	cbz	r0, 8001c9c <_vfiprintf_r+0x5c>
 8001c7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c80:	07dc      	lsls	r4, r3, #31
 8001c82:	d504      	bpl.n	8001c8e <_vfiprintf_r+0x4e>
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	b01d      	add	sp, #116	@ 0x74
 8001c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c8e:	89ab      	ldrh	r3, [r5, #12]
 8001c90:	0598      	lsls	r0, r3, #22
 8001c92:	d4f7      	bmi.n	8001c84 <_vfiprintf_r+0x44>
 8001c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c96:	f7ff feb3 	bl	8001a00 <__retarget_lock_release_recursive>
 8001c9a:	e7f3      	b.n	8001c84 <_vfiprintf_r+0x44>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001ca6:	2330      	movs	r3, #48	@ 0x30
 8001ca8:	f04f 0901 	mov.w	r9, #1
 8001cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cb0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8001e5c <_vfiprintf_r+0x21c>
 8001cb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001cb8:	4623      	mov	r3, r4
 8001cba:	469a      	mov	sl, r3
 8001cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cc0:	b10a      	cbz	r2, 8001cc6 <_vfiprintf_r+0x86>
 8001cc2:	2a25      	cmp	r2, #37	@ 0x25
 8001cc4:	d1f9      	bne.n	8001cba <_vfiprintf_r+0x7a>
 8001cc6:	ebba 0b04 	subs.w	fp, sl, r4
 8001cca:	d00b      	beq.n	8001ce4 <_vfiprintf_r+0xa4>
 8001ccc:	465b      	mov	r3, fp
 8001cce:	4622      	mov	r2, r4
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	4630      	mov	r0, r6
 8001cd4:	f7ff ffa1 	bl	8001c1a <__sfputs_r>
 8001cd8:	3001      	adds	r0, #1
 8001cda:	f000 80a7 	beq.w	8001e2c <_vfiprintf_r+0x1ec>
 8001cde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001ce0:	445a      	add	r2, fp
 8001ce2:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 809f 	beq.w	8001e2c <_vfiprintf_r+0x1ec>
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001cf8:	f10a 0a01 	add.w	sl, sl, #1
 8001cfc:	9304      	str	r3, [sp, #16]
 8001cfe:	9307      	str	r3, [sp, #28]
 8001d00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001d04:	931a      	str	r3, [sp, #104]	@ 0x68
 8001d06:	4654      	mov	r4, sl
 8001d08:	2205      	movs	r2, #5
 8001d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d0e:	4853      	ldr	r0, [pc, #332]	@ (8001e5c <_vfiprintf_r+0x21c>)
 8001d10:	f000 fb8c 	bl	800242c <memchr>
 8001d14:	9a04      	ldr	r2, [sp, #16]
 8001d16:	b9d8      	cbnz	r0, 8001d50 <_vfiprintf_r+0x110>
 8001d18:	06d1      	lsls	r1, r2, #27
 8001d1a:	bf44      	itt	mi
 8001d1c:	2320      	movmi	r3, #32
 8001d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d22:	0713      	lsls	r3, r2, #28
 8001d24:	bf44      	itt	mi
 8001d26:	232b      	movmi	r3, #43	@ 0x2b
 8001d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8001d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d32:	d015      	beq.n	8001d60 <_vfiprintf_r+0x120>
 8001d34:	4654      	mov	r4, sl
 8001d36:	2000      	movs	r0, #0
 8001d38:	f04f 0c0a 	mov.w	ip, #10
 8001d3c:	9a07      	ldr	r2, [sp, #28]
 8001d3e:	4621      	mov	r1, r4
 8001d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d44:	3b30      	subs	r3, #48	@ 0x30
 8001d46:	2b09      	cmp	r3, #9
 8001d48:	d94b      	bls.n	8001de2 <_vfiprintf_r+0x1a2>
 8001d4a:	b1b0      	cbz	r0, 8001d7a <_vfiprintf_r+0x13a>
 8001d4c:	9207      	str	r2, [sp, #28]
 8001d4e:	e014      	b.n	8001d7a <_vfiprintf_r+0x13a>
 8001d50:	eba0 0308 	sub.w	r3, r0, r8
 8001d54:	fa09 f303 	lsl.w	r3, r9, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	46a2      	mov	sl, r4
 8001d5c:	9304      	str	r3, [sp, #16]
 8001d5e:	e7d2      	b.n	8001d06 <_vfiprintf_r+0xc6>
 8001d60:	9b03      	ldr	r3, [sp, #12]
 8001d62:	1d19      	adds	r1, r3, #4
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	9103      	str	r1, [sp, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bfbb      	ittet	lt
 8001d6c:	425b      	neglt	r3, r3
 8001d6e:	f042 0202 	orrlt.w	r2, r2, #2
 8001d72:	9307      	strge	r3, [sp, #28]
 8001d74:	9307      	strlt	r3, [sp, #28]
 8001d76:	bfb8      	it	lt
 8001d78:	9204      	strlt	r2, [sp, #16]
 8001d7a:	7823      	ldrb	r3, [r4, #0]
 8001d7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d7e:	d10a      	bne.n	8001d96 <_vfiprintf_r+0x156>
 8001d80:	7863      	ldrb	r3, [r4, #1]
 8001d82:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d84:	d132      	bne.n	8001dec <_vfiprintf_r+0x1ac>
 8001d86:	9b03      	ldr	r3, [sp, #12]
 8001d88:	3402      	adds	r4, #2
 8001d8a:	1d1a      	adds	r2, r3, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	9203      	str	r2, [sp, #12]
 8001d90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001d94:	9305      	str	r3, [sp, #20]
 8001d96:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001e60 <_vfiprintf_r+0x220>
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	4650      	mov	r0, sl
 8001d9e:	7821      	ldrb	r1, [r4, #0]
 8001da0:	f000 fb44 	bl	800242c <memchr>
 8001da4:	b138      	cbz	r0, 8001db6 <_vfiprintf_r+0x176>
 8001da6:	2240      	movs	r2, #64	@ 0x40
 8001da8:	9b04      	ldr	r3, [sp, #16]
 8001daa:	eba0 000a 	sub.w	r0, r0, sl
 8001dae:	4082      	lsls	r2, r0
 8001db0:	4313      	orrs	r3, r2
 8001db2:	3401      	adds	r4, #1
 8001db4:	9304      	str	r3, [sp, #16]
 8001db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dba:	2206      	movs	r2, #6
 8001dbc:	4829      	ldr	r0, [pc, #164]	@ (8001e64 <_vfiprintf_r+0x224>)
 8001dbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001dc2:	f000 fb33 	bl	800242c <memchr>
 8001dc6:	2800      	cmp	r0, #0
 8001dc8:	d03f      	beq.n	8001e4a <_vfiprintf_r+0x20a>
 8001dca:	4b27      	ldr	r3, [pc, #156]	@ (8001e68 <_vfiprintf_r+0x228>)
 8001dcc:	bb1b      	cbnz	r3, 8001e16 <_vfiprintf_r+0x1d6>
 8001dce:	9b03      	ldr	r3, [sp, #12]
 8001dd0:	3307      	adds	r3, #7
 8001dd2:	f023 0307 	bic.w	r3, r3, #7
 8001dd6:	3308      	adds	r3, #8
 8001dd8:	9303      	str	r3, [sp, #12]
 8001dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ddc:	443b      	add	r3, r7
 8001dde:	9309      	str	r3, [sp, #36]	@ 0x24
 8001de0:	e76a      	b.n	8001cb8 <_vfiprintf_r+0x78>
 8001de2:	460c      	mov	r4, r1
 8001de4:	2001      	movs	r0, #1
 8001de6:	fb0c 3202 	mla	r2, ip, r2, r3
 8001dea:	e7a8      	b.n	8001d3e <_vfiprintf_r+0xfe>
 8001dec:	2300      	movs	r3, #0
 8001dee:	f04f 0c0a 	mov.w	ip, #10
 8001df2:	4619      	mov	r1, r3
 8001df4:	3401      	adds	r4, #1
 8001df6:	9305      	str	r3, [sp, #20]
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001dfe:	3a30      	subs	r2, #48	@ 0x30
 8001e00:	2a09      	cmp	r2, #9
 8001e02:	d903      	bls.n	8001e0c <_vfiprintf_r+0x1cc>
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0c6      	beq.n	8001d96 <_vfiprintf_r+0x156>
 8001e08:	9105      	str	r1, [sp, #20]
 8001e0a:	e7c4      	b.n	8001d96 <_vfiprintf_r+0x156>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	2301      	movs	r3, #1
 8001e10:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e14:	e7f0      	b.n	8001df8 <_vfiprintf_r+0x1b8>
 8001e16:	ab03      	add	r3, sp, #12
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	462a      	mov	r2, r5
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <_vfiprintf_r+0x22c>)
 8001e20:	a904      	add	r1, sp, #16
 8001e22:	f3af 8000 	nop.w
 8001e26:	4607      	mov	r7, r0
 8001e28:	1c78      	adds	r0, r7, #1
 8001e2a:	d1d6      	bne.n	8001dda <_vfiprintf_r+0x19a>
 8001e2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e2e:	07d9      	lsls	r1, r3, #31
 8001e30:	d405      	bmi.n	8001e3e <_vfiprintf_r+0x1fe>
 8001e32:	89ab      	ldrh	r3, [r5, #12]
 8001e34:	059a      	lsls	r2, r3, #22
 8001e36:	d402      	bmi.n	8001e3e <_vfiprintf_r+0x1fe>
 8001e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e3a:	f7ff fde1 	bl	8001a00 <__retarget_lock_release_recursive>
 8001e3e:	89ab      	ldrh	r3, [r5, #12]
 8001e40:	065b      	lsls	r3, r3, #25
 8001e42:	f53f af1f 	bmi.w	8001c84 <_vfiprintf_r+0x44>
 8001e46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001e48:	e71e      	b.n	8001c88 <_vfiprintf_r+0x48>
 8001e4a:	ab03      	add	r3, sp, #12
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	462a      	mov	r2, r5
 8001e50:	4630      	mov	r0, r6
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <_vfiprintf_r+0x22c>)
 8001e54:	a904      	add	r1, sp, #16
 8001e56:	f000 f87d 	bl	8001f54 <_printf_i>
 8001e5a:	e7e4      	b.n	8001e26 <_vfiprintf_r+0x1e6>
 8001e5c:	08002594 	.word	0x08002594
 8001e60:	0800259a 	.word	0x0800259a
 8001e64:	0800259e 	.word	0x0800259e
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	08001c1b 	.word	0x08001c1b

08001e70 <_printf_common>:
 8001e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e74:	4616      	mov	r6, r2
 8001e76:	4698      	mov	r8, r3
 8001e78:	688a      	ldr	r2, [r1, #8]
 8001e7a:	690b      	ldr	r3, [r1, #16]
 8001e7c:	4607      	mov	r7, r0
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	bfb8      	it	lt
 8001e82:	4613      	movlt	r3, r2
 8001e84:	6033      	str	r3, [r6, #0]
 8001e86:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001e8a:	460c      	mov	r4, r1
 8001e8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001e90:	b10a      	cbz	r2, 8001e96 <_printf_common+0x26>
 8001e92:	3301      	adds	r3, #1
 8001e94:	6033      	str	r3, [r6, #0]
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	0699      	lsls	r1, r3, #26
 8001e9a:	bf42      	ittt	mi
 8001e9c:	6833      	ldrmi	r3, [r6, #0]
 8001e9e:	3302      	addmi	r3, #2
 8001ea0:	6033      	strmi	r3, [r6, #0]
 8001ea2:	6825      	ldr	r5, [r4, #0]
 8001ea4:	f015 0506 	ands.w	r5, r5, #6
 8001ea8:	d106      	bne.n	8001eb8 <_printf_common+0x48>
 8001eaa:	f104 0a19 	add.w	sl, r4, #25
 8001eae:	68e3      	ldr	r3, [r4, #12]
 8001eb0:	6832      	ldr	r2, [r6, #0]
 8001eb2:	1a9b      	subs	r3, r3, r2
 8001eb4:	42ab      	cmp	r3, r5
 8001eb6:	dc2b      	bgt.n	8001f10 <_printf_common+0xa0>
 8001eb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ebc:	6822      	ldr	r2, [r4, #0]
 8001ebe:	3b00      	subs	r3, #0
 8001ec0:	bf18      	it	ne
 8001ec2:	2301      	movne	r3, #1
 8001ec4:	0692      	lsls	r2, r2, #26
 8001ec6:	d430      	bmi.n	8001f2a <_printf_common+0xba>
 8001ec8:	4641      	mov	r1, r8
 8001eca:	4638      	mov	r0, r7
 8001ecc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001ed0:	47c8      	blx	r9
 8001ed2:	3001      	adds	r0, #1
 8001ed4:	d023      	beq.n	8001f1e <_printf_common+0xae>
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	6922      	ldr	r2, [r4, #16]
 8001eda:	f003 0306 	and.w	r3, r3, #6
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf14      	ite	ne
 8001ee2:	2500      	movne	r5, #0
 8001ee4:	6833      	ldreq	r3, [r6, #0]
 8001ee6:	f04f 0600 	mov.w	r6, #0
 8001eea:	bf08      	it	eq
 8001eec:	68e5      	ldreq	r5, [r4, #12]
 8001eee:	f104 041a 	add.w	r4, r4, #26
 8001ef2:	bf08      	it	eq
 8001ef4:	1aed      	subeq	r5, r5, r3
 8001ef6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001efa:	bf08      	it	eq
 8001efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f00:	4293      	cmp	r3, r2
 8001f02:	bfc4      	itt	gt
 8001f04:	1a9b      	subgt	r3, r3, r2
 8001f06:	18ed      	addgt	r5, r5, r3
 8001f08:	42b5      	cmp	r5, r6
 8001f0a:	d11a      	bne.n	8001f42 <_printf_common+0xd2>
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	e008      	b.n	8001f22 <_printf_common+0xb2>
 8001f10:	2301      	movs	r3, #1
 8001f12:	4652      	mov	r2, sl
 8001f14:	4641      	mov	r1, r8
 8001f16:	4638      	mov	r0, r7
 8001f18:	47c8      	blx	r9
 8001f1a:	3001      	adds	r0, #1
 8001f1c:	d103      	bne.n	8001f26 <_printf_common+0xb6>
 8001f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f26:	3501      	adds	r5, #1
 8001f28:	e7c1      	b.n	8001eae <_printf_common+0x3e>
 8001f2a:	2030      	movs	r0, #48	@ 0x30
 8001f2c:	18e1      	adds	r1, r4, r3
 8001f2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f38:	4422      	add	r2, r4
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001f40:	e7c2      	b.n	8001ec8 <_printf_common+0x58>
 8001f42:	2301      	movs	r3, #1
 8001f44:	4622      	mov	r2, r4
 8001f46:	4641      	mov	r1, r8
 8001f48:	4638      	mov	r0, r7
 8001f4a:	47c8      	blx	r9
 8001f4c:	3001      	adds	r0, #1
 8001f4e:	d0e6      	beq.n	8001f1e <_printf_common+0xae>
 8001f50:	3601      	adds	r6, #1
 8001f52:	e7d9      	b.n	8001f08 <_printf_common+0x98>

08001f54 <_printf_i>:
 8001f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f58:	7e0f      	ldrb	r7, [r1, #24]
 8001f5a:	4691      	mov	r9, r2
 8001f5c:	2f78      	cmp	r7, #120	@ 0x78
 8001f5e:	4680      	mov	r8, r0
 8001f60:	460c      	mov	r4, r1
 8001f62:	469a      	mov	sl, r3
 8001f64:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001f66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001f6a:	d807      	bhi.n	8001f7c <_printf_i+0x28>
 8001f6c:	2f62      	cmp	r7, #98	@ 0x62
 8001f6e:	d80a      	bhi.n	8001f86 <_printf_i+0x32>
 8001f70:	2f00      	cmp	r7, #0
 8001f72:	f000 80d3 	beq.w	800211c <_printf_i+0x1c8>
 8001f76:	2f58      	cmp	r7, #88	@ 0x58
 8001f78:	f000 80ba 	beq.w	80020f0 <_printf_i+0x19c>
 8001f7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001f84:	e03a      	b.n	8001ffc <_printf_i+0xa8>
 8001f86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001f8a:	2b15      	cmp	r3, #21
 8001f8c:	d8f6      	bhi.n	8001f7c <_printf_i+0x28>
 8001f8e:	a101      	add	r1, pc, #4	@ (adr r1, 8001f94 <_printf_i+0x40>)
 8001f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f94:	08001fed 	.word	0x08001fed
 8001f98:	08002001 	.word	0x08002001
 8001f9c:	08001f7d 	.word	0x08001f7d
 8001fa0:	08001f7d 	.word	0x08001f7d
 8001fa4:	08001f7d 	.word	0x08001f7d
 8001fa8:	08001f7d 	.word	0x08001f7d
 8001fac:	08002001 	.word	0x08002001
 8001fb0:	08001f7d 	.word	0x08001f7d
 8001fb4:	08001f7d 	.word	0x08001f7d
 8001fb8:	08001f7d 	.word	0x08001f7d
 8001fbc:	08001f7d 	.word	0x08001f7d
 8001fc0:	08002103 	.word	0x08002103
 8001fc4:	0800202b 	.word	0x0800202b
 8001fc8:	080020bd 	.word	0x080020bd
 8001fcc:	08001f7d 	.word	0x08001f7d
 8001fd0:	08001f7d 	.word	0x08001f7d
 8001fd4:	08002125 	.word	0x08002125
 8001fd8:	08001f7d 	.word	0x08001f7d
 8001fdc:	0800202b 	.word	0x0800202b
 8001fe0:	08001f7d 	.word	0x08001f7d
 8001fe4:	08001f7d 	.word	0x08001f7d
 8001fe8:	080020c5 	.word	0x080020c5
 8001fec:	6833      	ldr	r3, [r6, #0]
 8001fee:	1d1a      	adds	r2, r3, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6032      	str	r2, [r6, #0]
 8001ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ff8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e09e      	b.n	800213e <_printf_i+0x1ea>
 8002000:	6833      	ldr	r3, [r6, #0]
 8002002:	6820      	ldr	r0, [r4, #0]
 8002004:	1d19      	adds	r1, r3, #4
 8002006:	6031      	str	r1, [r6, #0]
 8002008:	0606      	lsls	r6, r0, #24
 800200a:	d501      	bpl.n	8002010 <_printf_i+0xbc>
 800200c:	681d      	ldr	r5, [r3, #0]
 800200e:	e003      	b.n	8002018 <_printf_i+0xc4>
 8002010:	0645      	lsls	r5, r0, #25
 8002012:	d5fb      	bpl.n	800200c <_printf_i+0xb8>
 8002014:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002018:	2d00      	cmp	r5, #0
 800201a:	da03      	bge.n	8002024 <_printf_i+0xd0>
 800201c:	232d      	movs	r3, #45	@ 0x2d
 800201e:	426d      	negs	r5, r5
 8002020:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002024:	230a      	movs	r3, #10
 8002026:	4859      	ldr	r0, [pc, #356]	@ (800218c <_printf_i+0x238>)
 8002028:	e011      	b.n	800204e <_printf_i+0xfa>
 800202a:	6821      	ldr	r1, [r4, #0]
 800202c:	6833      	ldr	r3, [r6, #0]
 800202e:	0608      	lsls	r0, r1, #24
 8002030:	f853 5b04 	ldr.w	r5, [r3], #4
 8002034:	d402      	bmi.n	800203c <_printf_i+0xe8>
 8002036:	0649      	lsls	r1, r1, #25
 8002038:	bf48      	it	mi
 800203a:	b2ad      	uxthmi	r5, r5
 800203c:	2f6f      	cmp	r7, #111	@ 0x6f
 800203e:	6033      	str	r3, [r6, #0]
 8002040:	bf14      	ite	ne
 8002042:	230a      	movne	r3, #10
 8002044:	2308      	moveq	r3, #8
 8002046:	4851      	ldr	r0, [pc, #324]	@ (800218c <_printf_i+0x238>)
 8002048:	2100      	movs	r1, #0
 800204a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800204e:	6866      	ldr	r6, [r4, #4]
 8002050:	2e00      	cmp	r6, #0
 8002052:	bfa8      	it	ge
 8002054:	6821      	ldrge	r1, [r4, #0]
 8002056:	60a6      	str	r6, [r4, #8]
 8002058:	bfa4      	itt	ge
 800205a:	f021 0104 	bicge.w	r1, r1, #4
 800205e:	6021      	strge	r1, [r4, #0]
 8002060:	b90d      	cbnz	r5, 8002066 <_printf_i+0x112>
 8002062:	2e00      	cmp	r6, #0
 8002064:	d04b      	beq.n	80020fe <_printf_i+0x1aa>
 8002066:	4616      	mov	r6, r2
 8002068:	fbb5 f1f3 	udiv	r1, r5, r3
 800206c:	fb03 5711 	mls	r7, r3, r1, r5
 8002070:	5dc7      	ldrb	r7, [r0, r7]
 8002072:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002076:	462f      	mov	r7, r5
 8002078:	42bb      	cmp	r3, r7
 800207a:	460d      	mov	r5, r1
 800207c:	d9f4      	bls.n	8002068 <_printf_i+0x114>
 800207e:	2b08      	cmp	r3, #8
 8002080:	d10b      	bne.n	800209a <_printf_i+0x146>
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	07df      	lsls	r7, r3, #31
 8002086:	d508      	bpl.n	800209a <_printf_i+0x146>
 8002088:	6923      	ldr	r3, [r4, #16]
 800208a:	6861      	ldr	r1, [r4, #4]
 800208c:	4299      	cmp	r1, r3
 800208e:	bfde      	ittt	le
 8002090:	2330      	movle	r3, #48	@ 0x30
 8002092:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002096:	f106 36ff 	addle.w	r6, r6, #4294967295
 800209a:	1b92      	subs	r2, r2, r6
 800209c:	6122      	str	r2, [r4, #16]
 800209e:	464b      	mov	r3, r9
 80020a0:	4621      	mov	r1, r4
 80020a2:	4640      	mov	r0, r8
 80020a4:	f8cd a000 	str.w	sl, [sp]
 80020a8:	aa03      	add	r2, sp, #12
 80020aa:	f7ff fee1 	bl	8001e70 <_printf_common>
 80020ae:	3001      	adds	r0, #1
 80020b0:	d14a      	bne.n	8002148 <_printf_i+0x1f4>
 80020b2:	f04f 30ff 	mov.w	r0, #4294967295
 80020b6:	b004      	add	sp, #16
 80020b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	f043 0320 	orr.w	r3, r3, #32
 80020c2:	6023      	str	r3, [r4, #0]
 80020c4:	2778      	movs	r7, #120	@ 0x78
 80020c6:	4832      	ldr	r0, [pc, #200]	@ (8002190 <_printf_i+0x23c>)
 80020c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	6831      	ldr	r1, [r6, #0]
 80020d0:	061f      	lsls	r7, r3, #24
 80020d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80020d6:	d402      	bmi.n	80020de <_printf_i+0x18a>
 80020d8:	065f      	lsls	r7, r3, #25
 80020da:	bf48      	it	mi
 80020dc:	b2ad      	uxthmi	r5, r5
 80020de:	6031      	str	r1, [r6, #0]
 80020e0:	07d9      	lsls	r1, r3, #31
 80020e2:	bf44      	itt	mi
 80020e4:	f043 0320 	orrmi.w	r3, r3, #32
 80020e8:	6023      	strmi	r3, [r4, #0]
 80020ea:	b11d      	cbz	r5, 80020f4 <_printf_i+0x1a0>
 80020ec:	2310      	movs	r3, #16
 80020ee:	e7ab      	b.n	8002048 <_printf_i+0xf4>
 80020f0:	4826      	ldr	r0, [pc, #152]	@ (800218c <_printf_i+0x238>)
 80020f2:	e7e9      	b.n	80020c8 <_printf_i+0x174>
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	f023 0320 	bic.w	r3, r3, #32
 80020fa:	6023      	str	r3, [r4, #0]
 80020fc:	e7f6      	b.n	80020ec <_printf_i+0x198>
 80020fe:	4616      	mov	r6, r2
 8002100:	e7bd      	b.n	800207e <_printf_i+0x12a>
 8002102:	6833      	ldr	r3, [r6, #0]
 8002104:	6825      	ldr	r5, [r4, #0]
 8002106:	1d18      	adds	r0, r3, #4
 8002108:	6961      	ldr	r1, [r4, #20]
 800210a:	6030      	str	r0, [r6, #0]
 800210c:	062e      	lsls	r6, r5, #24
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	d501      	bpl.n	8002116 <_printf_i+0x1c2>
 8002112:	6019      	str	r1, [r3, #0]
 8002114:	e002      	b.n	800211c <_printf_i+0x1c8>
 8002116:	0668      	lsls	r0, r5, #25
 8002118:	d5fb      	bpl.n	8002112 <_printf_i+0x1be>
 800211a:	8019      	strh	r1, [r3, #0]
 800211c:	2300      	movs	r3, #0
 800211e:	4616      	mov	r6, r2
 8002120:	6123      	str	r3, [r4, #16]
 8002122:	e7bc      	b.n	800209e <_printf_i+0x14a>
 8002124:	6833      	ldr	r3, [r6, #0]
 8002126:	2100      	movs	r1, #0
 8002128:	1d1a      	adds	r2, r3, #4
 800212a:	6032      	str	r2, [r6, #0]
 800212c:	681e      	ldr	r6, [r3, #0]
 800212e:	6862      	ldr	r2, [r4, #4]
 8002130:	4630      	mov	r0, r6
 8002132:	f000 f97b 	bl	800242c <memchr>
 8002136:	b108      	cbz	r0, 800213c <_printf_i+0x1e8>
 8002138:	1b80      	subs	r0, r0, r6
 800213a:	6060      	str	r0, [r4, #4]
 800213c:	6863      	ldr	r3, [r4, #4]
 800213e:	6123      	str	r3, [r4, #16]
 8002140:	2300      	movs	r3, #0
 8002142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002146:	e7aa      	b.n	800209e <_printf_i+0x14a>
 8002148:	4632      	mov	r2, r6
 800214a:	4649      	mov	r1, r9
 800214c:	4640      	mov	r0, r8
 800214e:	6923      	ldr	r3, [r4, #16]
 8002150:	47d0      	blx	sl
 8002152:	3001      	adds	r0, #1
 8002154:	d0ad      	beq.n	80020b2 <_printf_i+0x15e>
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	079b      	lsls	r3, r3, #30
 800215a:	d413      	bmi.n	8002184 <_printf_i+0x230>
 800215c:	68e0      	ldr	r0, [r4, #12]
 800215e:	9b03      	ldr	r3, [sp, #12]
 8002160:	4298      	cmp	r0, r3
 8002162:	bfb8      	it	lt
 8002164:	4618      	movlt	r0, r3
 8002166:	e7a6      	b.n	80020b6 <_printf_i+0x162>
 8002168:	2301      	movs	r3, #1
 800216a:	4632      	mov	r2, r6
 800216c:	4649      	mov	r1, r9
 800216e:	4640      	mov	r0, r8
 8002170:	47d0      	blx	sl
 8002172:	3001      	adds	r0, #1
 8002174:	d09d      	beq.n	80020b2 <_printf_i+0x15e>
 8002176:	3501      	adds	r5, #1
 8002178:	68e3      	ldr	r3, [r4, #12]
 800217a:	9903      	ldr	r1, [sp, #12]
 800217c:	1a5b      	subs	r3, r3, r1
 800217e:	42ab      	cmp	r3, r5
 8002180:	dcf2      	bgt.n	8002168 <_printf_i+0x214>
 8002182:	e7eb      	b.n	800215c <_printf_i+0x208>
 8002184:	2500      	movs	r5, #0
 8002186:	f104 0619 	add.w	r6, r4, #25
 800218a:	e7f5      	b.n	8002178 <_printf_i+0x224>
 800218c:	080025a5 	.word	0x080025a5
 8002190:	080025b6 	.word	0x080025b6

08002194 <__sflush_r>:
 8002194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219a:	0716      	lsls	r6, r2, #28
 800219c:	4605      	mov	r5, r0
 800219e:	460c      	mov	r4, r1
 80021a0:	d454      	bmi.n	800224c <__sflush_r+0xb8>
 80021a2:	684b      	ldr	r3, [r1, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	dc02      	bgt.n	80021ae <__sflush_r+0x1a>
 80021a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	dd48      	ble.n	8002240 <__sflush_r+0xac>
 80021ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80021b0:	2e00      	cmp	r6, #0
 80021b2:	d045      	beq.n	8002240 <__sflush_r+0xac>
 80021b4:	2300      	movs	r3, #0
 80021b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80021ba:	682f      	ldr	r7, [r5, #0]
 80021bc:	6a21      	ldr	r1, [r4, #32]
 80021be:	602b      	str	r3, [r5, #0]
 80021c0:	d030      	beq.n	8002224 <__sflush_r+0x90>
 80021c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80021c4:	89a3      	ldrh	r3, [r4, #12]
 80021c6:	0759      	lsls	r1, r3, #29
 80021c8:	d505      	bpl.n	80021d6 <__sflush_r+0x42>
 80021ca:	6863      	ldr	r3, [r4, #4]
 80021cc:	1ad2      	subs	r2, r2, r3
 80021ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80021d0:	b10b      	cbz	r3, 80021d6 <__sflush_r+0x42>
 80021d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021d4:	1ad2      	subs	r2, r2, r3
 80021d6:	2300      	movs	r3, #0
 80021d8:	4628      	mov	r0, r5
 80021da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80021dc:	6a21      	ldr	r1, [r4, #32]
 80021de:	47b0      	blx	r6
 80021e0:	1c43      	adds	r3, r0, #1
 80021e2:	89a3      	ldrh	r3, [r4, #12]
 80021e4:	d106      	bne.n	80021f4 <__sflush_r+0x60>
 80021e6:	6829      	ldr	r1, [r5, #0]
 80021e8:	291d      	cmp	r1, #29
 80021ea:	d82b      	bhi.n	8002244 <__sflush_r+0xb0>
 80021ec:	4a28      	ldr	r2, [pc, #160]	@ (8002290 <__sflush_r+0xfc>)
 80021ee:	410a      	asrs	r2, r1
 80021f0:	07d6      	lsls	r6, r2, #31
 80021f2:	d427      	bmi.n	8002244 <__sflush_r+0xb0>
 80021f4:	2200      	movs	r2, #0
 80021f6:	6062      	str	r2, [r4, #4]
 80021f8:	6922      	ldr	r2, [r4, #16]
 80021fa:	04d9      	lsls	r1, r3, #19
 80021fc:	6022      	str	r2, [r4, #0]
 80021fe:	d504      	bpl.n	800220a <__sflush_r+0x76>
 8002200:	1c42      	adds	r2, r0, #1
 8002202:	d101      	bne.n	8002208 <__sflush_r+0x74>
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	b903      	cbnz	r3, 800220a <__sflush_r+0x76>
 8002208:	6560      	str	r0, [r4, #84]	@ 0x54
 800220a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800220c:	602f      	str	r7, [r5, #0]
 800220e:	b1b9      	cbz	r1, 8002240 <__sflush_r+0xac>
 8002210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002214:	4299      	cmp	r1, r3
 8002216:	d002      	beq.n	800221e <__sflush_r+0x8a>
 8002218:	4628      	mov	r0, r5
 800221a:	f7ff fbf3 	bl	8001a04 <_free_r>
 800221e:	2300      	movs	r3, #0
 8002220:	6363      	str	r3, [r4, #52]	@ 0x34
 8002222:	e00d      	b.n	8002240 <__sflush_r+0xac>
 8002224:	2301      	movs	r3, #1
 8002226:	4628      	mov	r0, r5
 8002228:	47b0      	blx	r6
 800222a:	4602      	mov	r2, r0
 800222c:	1c50      	adds	r0, r2, #1
 800222e:	d1c9      	bne.n	80021c4 <__sflush_r+0x30>
 8002230:	682b      	ldr	r3, [r5, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0c6      	beq.n	80021c4 <__sflush_r+0x30>
 8002236:	2b1d      	cmp	r3, #29
 8002238:	d001      	beq.n	800223e <__sflush_r+0xaa>
 800223a:	2b16      	cmp	r3, #22
 800223c:	d11d      	bne.n	800227a <__sflush_r+0xe6>
 800223e:	602f      	str	r7, [r5, #0]
 8002240:	2000      	movs	r0, #0
 8002242:	e021      	b.n	8002288 <__sflush_r+0xf4>
 8002244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002248:	b21b      	sxth	r3, r3
 800224a:	e01a      	b.n	8002282 <__sflush_r+0xee>
 800224c:	690f      	ldr	r7, [r1, #16]
 800224e:	2f00      	cmp	r7, #0
 8002250:	d0f6      	beq.n	8002240 <__sflush_r+0xac>
 8002252:	0793      	lsls	r3, r2, #30
 8002254:	bf18      	it	ne
 8002256:	2300      	movne	r3, #0
 8002258:	680e      	ldr	r6, [r1, #0]
 800225a:	bf08      	it	eq
 800225c:	694b      	ldreq	r3, [r1, #20]
 800225e:	1bf6      	subs	r6, r6, r7
 8002260:	600f      	str	r7, [r1, #0]
 8002262:	608b      	str	r3, [r1, #8]
 8002264:	2e00      	cmp	r6, #0
 8002266:	ddeb      	ble.n	8002240 <__sflush_r+0xac>
 8002268:	4633      	mov	r3, r6
 800226a:	463a      	mov	r2, r7
 800226c:	4628      	mov	r0, r5
 800226e:	6a21      	ldr	r1, [r4, #32]
 8002270:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002274:	47e0      	blx	ip
 8002276:	2800      	cmp	r0, #0
 8002278:	dc07      	bgt.n	800228a <__sflush_r+0xf6>
 800227a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800227e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002282:	f04f 30ff 	mov.w	r0, #4294967295
 8002286:	81a3      	strh	r3, [r4, #12]
 8002288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800228a:	4407      	add	r7, r0
 800228c:	1a36      	subs	r6, r6, r0
 800228e:	e7e9      	b.n	8002264 <__sflush_r+0xd0>
 8002290:	dfbffffe 	.word	0xdfbffffe

08002294 <_fflush_r>:
 8002294:	b538      	push	{r3, r4, r5, lr}
 8002296:	690b      	ldr	r3, [r1, #16]
 8002298:	4605      	mov	r5, r0
 800229a:	460c      	mov	r4, r1
 800229c:	b913      	cbnz	r3, 80022a4 <_fflush_r+0x10>
 800229e:	2500      	movs	r5, #0
 80022a0:	4628      	mov	r0, r5
 80022a2:	bd38      	pop	{r3, r4, r5, pc}
 80022a4:	b118      	cbz	r0, 80022ae <_fflush_r+0x1a>
 80022a6:	6a03      	ldr	r3, [r0, #32]
 80022a8:	b90b      	cbnz	r3, 80022ae <_fflush_r+0x1a>
 80022aa:	f7ff faa3 	bl	80017f4 <__sinit>
 80022ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f3      	beq.n	800229e <_fflush_r+0xa>
 80022b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80022b8:	07d0      	lsls	r0, r2, #31
 80022ba:	d404      	bmi.n	80022c6 <_fflush_r+0x32>
 80022bc:	0599      	lsls	r1, r3, #22
 80022be:	d402      	bmi.n	80022c6 <_fflush_r+0x32>
 80022c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022c2:	f7ff fb9c 	bl	80019fe <__retarget_lock_acquire_recursive>
 80022c6:	4628      	mov	r0, r5
 80022c8:	4621      	mov	r1, r4
 80022ca:	f7ff ff63 	bl	8002194 <__sflush_r>
 80022ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80022d0:	4605      	mov	r5, r0
 80022d2:	07da      	lsls	r2, r3, #31
 80022d4:	d4e4      	bmi.n	80022a0 <_fflush_r+0xc>
 80022d6:	89a3      	ldrh	r3, [r4, #12]
 80022d8:	059b      	lsls	r3, r3, #22
 80022da:	d4e1      	bmi.n	80022a0 <_fflush_r+0xc>
 80022dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022de:	f7ff fb8f 	bl	8001a00 <__retarget_lock_release_recursive>
 80022e2:	e7dd      	b.n	80022a0 <_fflush_r+0xc>

080022e4 <__swbuf_r>:
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	460e      	mov	r6, r1
 80022e8:	4614      	mov	r4, r2
 80022ea:	4605      	mov	r5, r0
 80022ec:	b118      	cbz	r0, 80022f6 <__swbuf_r+0x12>
 80022ee:	6a03      	ldr	r3, [r0, #32]
 80022f0:	b90b      	cbnz	r3, 80022f6 <__swbuf_r+0x12>
 80022f2:	f7ff fa7f 	bl	80017f4 <__sinit>
 80022f6:	69a3      	ldr	r3, [r4, #24]
 80022f8:	60a3      	str	r3, [r4, #8]
 80022fa:	89a3      	ldrh	r3, [r4, #12]
 80022fc:	071a      	lsls	r2, r3, #28
 80022fe:	d501      	bpl.n	8002304 <__swbuf_r+0x20>
 8002300:	6923      	ldr	r3, [r4, #16]
 8002302:	b943      	cbnz	r3, 8002316 <__swbuf_r+0x32>
 8002304:	4621      	mov	r1, r4
 8002306:	4628      	mov	r0, r5
 8002308:	f000 f82a 	bl	8002360 <__swsetup_r>
 800230c:	b118      	cbz	r0, 8002316 <__swbuf_r+0x32>
 800230e:	f04f 37ff 	mov.w	r7, #4294967295
 8002312:	4638      	mov	r0, r7
 8002314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	6922      	ldr	r2, [r4, #16]
 800231a:	b2f6      	uxtb	r6, r6
 800231c:	1a98      	subs	r0, r3, r2
 800231e:	6963      	ldr	r3, [r4, #20]
 8002320:	4637      	mov	r7, r6
 8002322:	4283      	cmp	r3, r0
 8002324:	dc05      	bgt.n	8002332 <__swbuf_r+0x4e>
 8002326:	4621      	mov	r1, r4
 8002328:	4628      	mov	r0, r5
 800232a:	f7ff ffb3 	bl	8002294 <_fflush_r>
 800232e:	2800      	cmp	r0, #0
 8002330:	d1ed      	bne.n	800230e <__swbuf_r+0x2a>
 8002332:	68a3      	ldr	r3, [r4, #8]
 8002334:	3b01      	subs	r3, #1
 8002336:	60a3      	str	r3, [r4, #8]
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	6022      	str	r2, [r4, #0]
 800233e:	701e      	strb	r6, [r3, #0]
 8002340:	6962      	ldr	r2, [r4, #20]
 8002342:	1c43      	adds	r3, r0, #1
 8002344:	429a      	cmp	r2, r3
 8002346:	d004      	beq.n	8002352 <__swbuf_r+0x6e>
 8002348:	89a3      	ldrh	r3, [r4, #12]
 800234a:	07db      	lsls	r3, r3, #31
 800234c:	d5e1      	bpl.n	8002312 <__swbuf_r+0x2e>
 800234e:	2e0a      	cmp	r6, #10
 8002350:	d1df      	bne.n	8002312 <__swbuf_r+0x2e>
 8002352:	4621      	mov	r1, r4
 8002354:	4628      	mov	r0, r5
 8002356:	f7ff ff9d 	bl	8002294 <_fflush_r>
 800235a:	2800      	cmp	r0, #0
 800235c:	d0d9      	beq.n	8002312 <__swbuf_r+0x2e>
 800235e:	e7d6      	b.n	800230e <__swbuf_r+0x2a>

08002360 <__swsetup_r>:
 8002360:	b538      	push	{r3, r4, r5, lr}
 8002362:	4b29      	ldr	r3, [pc, #164]	@ (8002408 <__swsetup_r+0xa8>)
 8002364:	4605      	mov	r5, r0
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	460c      	mov	r4, r1
 800236a:	b118      	cbz	r0, 8002374 <__swsetup_r+0x14>
 800236c:	6a03      	ldr	r3, [r0, #32]
 800236e:	b90b      	cbnz	r3, 8002374 <__swsetup_r+0x14>
 8002370:	f7ff fa40 	bl	80017f4 <__sinit>
 8002374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002378:	0719      	lsls	r1, r3, #28
 800237a:	d422      	bmi.n	80023c2 <__swsetup_r+0x62>
 800237c:	06da      	lsls	r2, r3, #27
 800237e:	d407      	bmi.n	8002390 <__swsetup_r+0x30>
 8002380:	2209      	movs	r2, #9
 8002382:	602a      	str	r2, [r5, #0]
 8002384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	81a3      	strh	r3, [r4, #12]
 800238e:	e033      	b.n	80023f8 <__swsetup_r+0x98>
 8002390:	0758      	lsls	r0, r3, #29
 8002392:	d512      	bpl.n	80023ba <__swsetup_r+0x5a>
 8002394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002396:	b141      	cbz	r1, 80023aa <__swsetup_r+0x4a>
 8002398:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800239c:	4299      	cmp	r1, r3
 800239e:	d002      	beq.n	80023a6 <__swsetup_r+0x46>
 80023a0:	4628      	mov	r0, r5
 80023a2:	f7ff fb2f 	bl	8001a04 <_free_r>
 80023a6:	2300      	movs	r3, #0
 80023a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80023aa:	89a3      	ldrh	r3, [r4, #12]
 80023ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80023b0:	81a3      	strh	r3, [r4, #12]
 80023b2:	2300      	movs	r3, #0
 80023b4:	6063      	str	r3, [r4, #4]
 80023b6:	6923      	ldr	r3, [r4, #16]
 80023b8:	6023      	str	r3, [r4, #0]
 80023ba:	89a3      	ldrh	r3, [r4, #12]
 80023bc:	f043 0308 	orr.w	r3, r3, #8
 80023c0:	81a3      	strh	r3, [r4, #12]
 80023c2:	6923      	ldr	r3, [r4, #16]
 80023c4:	b94b      	cbnz	r3, 80023da <__swsetup_r+0x7a>
 80023c6:	89a3      	ldrh	r3, [r4, #12]
 80023c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80023cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023d0:	d003      	beq.n	80023da <__swsetup_r+0x7a>
 80023d2:	4621      	mov	r1, r4
 80023d4:	4628      	mov	r0, r5
 80023d6:	f000 f85c 	bl	8002492 <__smakebuf_r>
 80023da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023de:	f013 0201 	ands.w	r2, r3, #1
 80023e2:	d00a      	beq.n	80023fa <__swsetup_r+0x9a>
 80023e4:	2200      	movs	r2, #0
 80023e6:	60a2      	str	r2, [r4, #8]
 80023e8:	6962      	ldr	r2, [r4, #20]
 80023ea:	4252      	negs	r2, r2
 80023ec:	61a2      	str	r2, [r4, #24]
 80023ee:	6922      	ldr	r2, [r4, #16]
 80023f0:	b942      	cbnz	r2, 8002404 <__swsetup_r+0xa4>
 80023f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80023f6:	d1c5      	bne.n	8002384 <__swsetup_r+0x24>
 80023f8:	bd38      	pop	{r3, r4, r5, pc}
 80023fa:	0799      	lsls	r1, r3, #30
 80023fc:	bf58      	it	pl
 80023fe:	6962      	ldrpl	r2, [r4, #20]
 8002400:	60a2      	str	r2, [r4, #8]
 8002402:	e7f4      	b.n	80023ee <__swsetup_r+0x8e>
 8002404:	2000      	movs	r0, #0
 8002406:	e7f7      	b.n	80023f8 <__swsetup_r+0x98>
 8002408:	20000010 	.word	0x20000010

0800240c <_sbrk_r>:
 800240c:	b538      	push	{r3, r4, r5, lr}
 800240e:	2300      	movs	r3, #0
 8002410:	4d05      	ldr	r5, [pc, #20]	@ (8002428 <_sbrk_r+0x1c>)
 8002412:	4604      	mov	r4, r0
 8002414:	4608      	mov	r0, r1
 8002416:	602b      	str	r3, [r5, #0]
 8002418:	f7fe fc82 	bl	8000d20 <_sbrk>
 800241c:	1c43      	adds	r3, r0, #1
 800241e:	d102      	bne.n	8002426 <_sbrk_r+0x1a>
 8002420:	682b      	ldr	r3, [r5, #0]
 8002422:	b103      	cbz	r3, 8002426 <_sbrk_r+0x1a>
 8002424:	6023      	str	r3, [r4, #0]
 8002426:	bd38      	pop	{r3, r4, r5, pc}
 8002428:	200001e0 	.word	0x200001e0

0800242c <memchr>:
 800242c:	4603      	mov	r3, r0
 800242e:	b510      	push	{r4, lr}
 8002430:	b2c9      	uxtb	r1, r1
 8002432:	4402      	add	r2, r0
 8002434:	4293      	cmp	r3, r2
 8002436:	4618      	mov	r0, r3
 8002438:	d101      	bne.n	800243e <memchr+0x12>
 800243a:	2000      	movs	r0, #0
 800243c:	e003      	b.n	8002446 <memchr+0x1a>
 800243e:	7804      	ldrb	r4, [r0, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	428c      	cmp	r4, r1
 8002444:	d1f6      	bne.n	8002434 <memchr+0x8>
 8002446:	bd10      	pop	{r4, pc}

08002448 <__swhatbuf_r>:
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	460c      	mov	r4, r1
 800244c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002450:	4615      	mov	r5, r2
 8002452:	2900      	cmp	r1, #0
 8002454:	461e      	mov	r6, r3
 8002456:	b096      	sub	sp, #88	@ 0x58
 8002458:	da0c      	bge.n	8002474 <__swhatbuf_r+0x2c>
 800245a:	89a3      	ldrh	r3, [r4, #12]
 800245c:	2100      	movs	r1, #0
 800245e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002462:	bf14      	ite	ne
 8002464:	2340      	movne	r3, #64	@ 0x40
 8002466:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800246a:	2000      	movs	r0, #0
 800246c:	6031      	str	r1, [r6, #0]
 800246e:	602b      	str	r3, [r5, #0]
 8002470:	b016      	add	sp, #88	@ 0x58
 8002472:	bd70      	pop	{r4, r5, r6, pc}
 8002474:	466a      	mov	r2, sp
 8002476:	f000 f849 	bl	800250c <_fstat_r>
 800247a:	2800      	cmp	r0, #0
 800247c:	dbed      	blt.n	800245a <__swhatbuf_r+0x12>
 800247e:	9901      	ldr	r1, [sp, #4]
 8002480:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002484:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002488:	4259      	negs	r1, r3
 800248a:	4159      	adcs	r1, r3
 800248c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002490:	e7eb      	b.n	800246a <__swhatbuf_r+0x22>

08002492 <__smakebuf_r>:
 8002492:	898b      	ldrh	r3, [r1, #12]
 8002494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002496:	079d      	lsls	r5, r3, #30
 8002498:	4606      	mov	r6, r0
 800249a:	460c      	mov	r4, r1
 800249c:	d507      	bpl.n	80024ae <__smakebuf_r+0x1c>
 800249e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80024a2:	6023      	str	r3, [r4, #0]
 80024a4:	6123      	str	r3, [r4, #16]
 80024a6:	2301      	movs	r3, #1
 80024a8:	6163      	str	r3, [r4, #20]
 80024aa:	b003      	add	sp, #12
 80024ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ae:	466a      	mov	r2, sp
 80024b0:	ab01      	add	r3, sp, #4
 80024b2:	f7ff ffc9 	bl	8002448 <__swhatbuf_r>
 80024b6:	9f00      	ldr	r7, [sp, #0]
 80024b8:	4605      	mov	r5, r0
 80024ba:	4639      	mov	r1, r7
 80024bc:	4630      	mov	r0, r6
 80024be:	f7ff fb0b 	bl	8001ad8 <_malloc_r>
 80024c2:	b948      	cbnz	r0, 80024d8 <__smakebuf_r+0x46>
 80024c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024c8:	059a      	lsls	r2, r3, #22
 80024ca:	d4ee      	bmi.n	80024aa <__smakebuf_r+0x18>
 80024cc:	f023 0303 	bic.w	r3, r3, #3
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	81a3      	strh	r3, [r4, #12]
 80024d6:	e7e2      	b.n	800249e <__smakebuf_r+0xc>
 80024d8:	89a3      	ldrh	r3, [r4, #12]
 80024da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80024de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024e2:	81a3      	strh	r3, [r4, #12]
 80024e4:	9b01      	ldr	r3, [sp, #4]
 80024e6:	6020      	str	r0, [r4, #0]
 80024e8:	b15b      	cbz	r3, 8002502 <__smakebuf_r+0x70>
 80024ea:	4630      	mov	r0, r6
 80024ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024f0:	f000 f81e 	bl	8002530 <_isatty_r>
 80024f4:	b128      	cbz	r0, 8002502 <__smakebuf_r+0x70>
 80024f6:	89a3      	ldrh	r3, [r4, #12]
 80024f8:	f023 0303 	bic.w	r3, r3, #3
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	81a3      	strh	r3, [r4, #12]
 8002502:	89a3      	ldrh	r3, [r4, #12]
 8002504:	431d      	orrs	r5, r3
 8002506:	81a5      	strh	r5, [r4, #12]
 8002508:	e7cf      	b.n	80024aa <__smakebuf_r+0x18>
	...

0800250c <_fstat_r>:
 800250c:	b538      	push	{r3, r4, r5, lr}
 800250e:	2300      	movs	r3, #0
 8002510:	4d06      	ldr	r5, [pc, #24]	@ (800252c <_fstat_r+0x20>)
 8002512:	4604      	mov	r4, r0
 8002514:	4608      	mov	r0, r1
 8002516:	4611      	mov	r1, r2
 8002518:	602b      	str	r3, [r5, #0]
 800251a:	f7fe fbdb 	bl	8000cd4 <_fstat>
 800251e:	1c43      	adds	r3, r0, #1
 8002520:	d102      	bne.n	8002528 <_fstat_r+0x1c>
 8002522:	682b      	ldr	r3, [r5, #0]
 8002524:	b103      	cbz	r3, 8002528 <_fstat_r+0x1c>
 8002526:	6023      	str	r3, [r4, #0]
 8002528:	bd38      	pop	{r3, r4, r5, pc}
 800252a:	bf00      	nop
 800252c:	200001e0 	.word	0x200001e0

08002530 <_isatty_r>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	2300      	movs	r3, #0
 8002534:	4d05      	ldr	r5, [pc, #20]	@ (800254c <_isatty_r+0x1c>)
 8002536:	4604      	mov	r4, r0
 8002538:	4608      	mov	r0, r1
 800253a:	602b      	str	r3, [r5, #0]
 800253c:	f7fe fbd9 	bl	8000cf2 <_isatty>
 8002540:	1c43      	adds	r3, r0, #1
 8002542:	d102      	bne.n	800254a <_isatty_r+0x1a>
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	b103      	cbz	r3, 800254a <_isatty_r+0x1a>
 8002548:	6023      	str	r3, [r4, #0]
 800254a:	bd38      	pop	{r3, r4, r5, pc}
 800254c:	200001e0 	.word	0x200001e0

08002550 <_init>:
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	bf00      	nop
 8002554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002556:	bc08      	pop	{r3}
 8002558:	469e      	mov	lr, r3
 800255a:	4770      	bx	lr

0800255c <_fini>:
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	bf00      	nop
 8002560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002562:	bc08      	pop	{r3}
 8002564:	469e      	mov	lr, r3
 8002566:	4770      	bx	lr
